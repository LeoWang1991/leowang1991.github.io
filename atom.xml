<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lifelover</title>
  <subtitle>love life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-14T02:28:44.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>jingxiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>iconfont的使用</title>
    <link href="http://yoursite.com/2016/10/14/iconfont%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2016/10/14/iconfont的使用/</id>
    <published>2016-10-14T02:28:44.000Z</published>
    <updated>2016-10-14T02:28:44.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>webpack学习之基础认识</title>
    <link href="http://yoursite.com/2016/10/10/webpack%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%9F%BA%E7%A1%80%E8%AE%A4%E8%AF%86/"/>
    <id>http://yoursite.com/2016/10/10/webpack学习之基础认识/</id>
    <published>2016-10-10T08:52:11.000Z</published>
    <updated>2016-10-10T08:58:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近学习React技术栈，作为技术栈的一部分webpack必须要学习。</p>
<h3 id="01-一些学习资源和路径"><a href="#01-一些学习资源和路径" class="headerlink" title="01 一些学习资源和路径"></a>01 一些学习资源和路径</h3><p><a href="http://webpack.github.io/docs/tutorials/getting-started/" target="_blank" rel="external">webpack-getting-started</a><br><a href="https://github.com/petehunt/webpack-howto" target="_blank" rel="external">webpack-howto</a><br><a href="https://github.com/ruanyf/webpack-demos" target="_blank" rel="external">ruanyf webpack-demo</a></p>
<h3 id="02基础概念"><a href="#02基础概念" class="headerlink" title="02基础概念"></a>02基础概念</h3><p><a href="http://webpack.github.io/docs/what-is-webpack.html" target="_blank" rel="external">what is webpack?</a><br>webpack是一种模块化打包工具，类似之前用过的browserify grunt gulp。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近学习React技术栈，作为技术栈的一部分webpack必须要学习。&lt;/p&gt;
&lt;h3 id=&quot;01-一些学习资源和路径&quot;&gt;&lt;a href=&quot;#01-一些学习资源和路径&quot; class=&quot;headerlink&quot; title=&quot;01 一些学习资源和路径&quot;&gt;&lt;/a&gt;01 一些学习
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>d3.js学习初识</title>
    <link href="http://yoursite.com/2016/10/09/d3-js%E5%AD%A6%E4%B9%A0%E5%88%9D%E8%AF%86/"/>
    <id>http://yoursite.com/2016/10/09/d3-js学习初识/</id>
    <published>2016-10-09T14:42:01.000Z</published>
    <updated>2016-10-09T15:03:09.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="D3是什么？"><a href="#D3是什么？" class="headerlink" title="D3是什么？"></a><a href="https://d3js.org/" target="_blank" rel="external">D3</a>是什么？</h3><blockquote>
<p>D3.js is a JavaScript library for manipulating documents based on data. D3 helps you bring data to life using HTML, SVG, and CSS. D3’s emphasis on web standards gives you the full capabilities of modern browsers without tying yourself to a proprietary framework, combining powerful visualization components and a data-driven approach to DOM manipulation.</p>
</blockquote>
<p>以上是官网的介绍，正如D3全名data-driven documents,简单说D3是基于数据驱动操纵文档的一个JavaScript库。用来画图表,之前接触过的图表库有<code>echarts</code> <code>highcharts</code>等，那么D3和它们有什么区别呢？打个比方像<code>echarts</code> <code>highcharts</code>之类的图表库就像美图秀秀等修图软件，而D3就像Photoshop，相对来说更加自由，可以根据自己所想所做图。</p>
<h3 id="基础知识点"><a href="#基础知识点" class="headerlink" title="基础知识点"></a>基础知识点</h3><ul>
<li>如果熟悉jQuery的话，D3对DOM的选择与之一样，十分容易上手，支持链式调用</li>
<li>数据和DOM的相交绑定处理，理解enter() update() exit()分别对应什么状态</li>
<li>通过操纵svg canvas来画图，需要对svg比较熟悉</li>
<li>D3也提供了很多图标模板如饼图、力导向图、柱状图等等，如果需要可以查看官方文档相关API</li>
<li>…</li>
</ul>
<h3 id="资源相关"><a href="#资源相关" class="headerlink" title="资源相关"></a>资源相关</h3><p>最新的d3版本是v4,中文相关的资料大多是v3版本，而v4版本相对v3改动比较大，如果英文不是很棒的话，建议还是找一些v3版本的中文资料对应的API看看，然后对比学习v4。<br>一些好的资源<br><a href="http://d3.decembercafe.org/" target="_blank" rel="external">DecembercafeD3学习站点 d3-v3</a><br><a href="https://github.com/d3/d3/wiki/API--%E4%B8%AD%E6%96%87%E6%89%8B%E5%86%8C" target="_blank" rel="external">D3 v3版本中文API</a><br><a href="https://github.com/d3/d3" target="_blank" rel="external">d3 github相关</a></p>
<h3 id="学习建议"><a href="#学习建议" class="headerlink" title="学习建议"></a>学习建议</h3><p>虽然demo看着好像是那么回事，但是真要自己写还是另一回事。还是要多写写，就算是对着写，重要是理解每一行代码吧。<br>1) 直接看官方文档 大致过一遍，看一些demo，对着写写，不懂查api<br>2) 中文资料的v3版本可以看看，v3版本的中文资料比较多看着用v3写写demo，然后用v4版本写。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;D3是什么？&quot;&gt;&lt;a href=&quot;#D3是什么？&quot; class=&quot;headerlink&quot; title=&quot;D3是什么？&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://d3js.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;D3&lt;/a&gt;是什么
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="d3.js" scheme="http://yoursite.com/tags/d3-js/"/>
    
  </entry>
  
  <entry>
    <title>react学习之组件基础</title>
    <link href="http://yoursite.com/2016/09/28/react%E5%AD%A6%E4%B9%A0%E4%B9%8B%E7%BB%84%E4%BB%B6%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2016/09/28/react学习之组件基础/</id>
    <published>2016-09-28T14:22:41.000Z</published>
    <updated>2016-09-28T14:45:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习参考 <a href="http://www.imooc.com/learn/504" target="_blank" rel="external">慕课网-react入门</a><br>讲的比较好</p>
<h3 id="React"><a href="#React" class="headerlink" title="React"></a>React</h3><ol>
<li>React并不是一个完整的MVC MVVM框架，只是其中的V部分</li>
<li>React组件化构建UI的思路值得学习</li>
<li>React的特点在于“轻量”,适合复杂场景的高性能开发,组件库的重用和组件的组合</li>
<li>…</li>
</ol>
<a id="more"></a>
<h3 id="React-Components"><a href="#React-Components" class="headerlink" title="React Components"></a>React Components</h3><p>React组件声明周期如下<br><img src="http://img.mukewang.com/57e88a340001b6ae12800720.jpg" alt=""></p>
<ol>
<li>Mounted: React.renderComponent() react组件被render解析生成对应DOM节点并插入浏览器的DOM结构的一个过程</li>
<li>Update: setState()/setProps() =&gt; render() react会将组件的当前state和最近state进行对比，如果发生改变影响DOM结构时候，则被重新render的过程</li>
<li>Unmounted: 一个mounted的react components对应DOM节点被从DOM结构中移除的一个过程</li>
</ol>
<p><em>每个状态React都封装了相应地hook函数</em><br><img src="http://img.mukewang.com/57ebc0130001668212800720.jpg" alt=""></p>
<ol>
<li><p>Mounting过程:<br> getDefaultProps() =&gt; getInitialState() =&gt; componentWillMount() =&gt; render() =&gt; componentsDidMount()</p>
</li>
<li><p>Updating过程:<br> componentWillReceiveProps() 当mounted component将要接受一个新的props时候触发 =&gt; shouldComponentUpdate() 判断当前props是否改变 改变则更新<br> =&gt; componentWillUpdate() =&gt; render() =&gt; componentDidUpdate();</p>
</li>
<li><p>Unmounting过程:<br> componentWillUnmount();</p>
</li>
</ol>
<h3 id="components的state和props的区别？"><a href="#components的state和props的区别？" class="headerlink" title="components的state和props的区别？"></a>components的state和props的区别？</h3><p>props在写组件的时候指定，一般情况下不会变；<br>state一般被认为是私属于当前组件，可以改变。</p>
<h3 id="component事件绑定"><a href="#component事件绑定" class="headerlink" title="component事件绑定"></a>component事件绑定</h3><p>两个学习demo<br>jsx基础</p>
<iframe width="100%" height="300" src="//jsfiddle.net/lifesimple/76yv5f6u/embedded/js,html,css,result/dark/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>

<p>component事件绑定</p>
<iframe width="100%" height="300" src="//jsfiddle.net/lifesimple/y8rb33tv/embedded/js,html,css,result/dark/" allowfullscreen="allowfullscreen" frameborder="0"></iframe>



<h3 id="注意一点，组件名称大写开头"><a href="#注意一点，组件名称大写开头" class="headerlink" title="注意一点，组件名称大写开头"></a>注意一点，组件名称<em>大写开头</em></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习参考 &lt;a href=&quot;http://www.imooc.com/learn/504&quot;&gt;慕课网-react入门&lt;/a&gt;&lt;br&gt;讲的比较好&lt;/p&gt;
&lt;h3 id=&quot;React&quot;&gt;&lt;a href=&quot;#React&quot; class=&quot;headerlink&quot; title=&quot;React&quot;&gt;&lt;/a&gt;React&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;React并不是一个完整的MVC MVVM框架，只是其中的V部分&lt;/li&gt;
&lt;li&gt;React组件化构建UI的思路值得学习&lt;/li&gt;
&lt;li&gt;React的特点在于“轻量”,适合复杂场景的高性能开发,组件库的重用和组件的组合&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="react" scheme="http://yoursite.com/tags/react/"/>
    
  </entry>
  
  <entry>
    <title>多个git账号配置管理</title>
    <link href="http://yoursite.com/2016/09/27/%E5%A4%9A%E4%B8%AAgit%E8%B4%A6%E5%8F%B7%E9%85%8D%E7%BD%AE%E7%AE%A1%E7%90%86/"/>
    <id>http://yoursite.com/2016/09/27/多个git账号配置管理/</id>
    <published>2016-09-27T12:42:52.000Z</published>
    <updated>2016-09-27T15:01:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>多个git账号的配置和使用，如果你原来有一个git账号(比如用于github)，工作中又需要有另一个git账号则需要两个配置两套公钥来使用，当然如果工作中和自己用的两个git账号都是同一个邮箱的话，一套公钥配置到两个sshkey上就行了。</p>
<a id="more"></a>
<p>具体步骤:<br>首先<br>1）先检查当前有没有已经存在的ssh key.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ls -al ~/.ssh</div></pre></td></tr></table></figure></p>
<p>2) 生成ssh key<br>可以参考<a href="https://help.github.com/articles/generating-an-ssh-key/" target="_blank" rel="external">github generating an ssh key</a><br>注意 如果一路回车默认生成的是名为<code>id_rsa</code>的key保存在~/.ssh下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;test123@qq.com&quot;</div><div class="line">Generating public/private rsa key pair.</div><div class="line">Enter file in which to save the key (/Users/jingxiao/.ssh/id_rsa):</div><div class="line">/Users/jingxiao/.ssh/id_rsa already exists.</div></pre></td></tr></table></figure></p>
<p>如果原先存在了 则会提示你要不要覆盖掉。<br>因此对于生成多个sshkey时候，则需要输入一个新的密钥名称比如<code>id_rsa_work</code>,建议位置也放在同一个目录下。<br>这样生成完两个或者多个不重名的ssh key 比如A和B，对应配置到相应地远程git账号上去比如github和gitLab。</p>
<p>3）这样你就有两个ssh key对应着两个不同的git账号。这时候需要创建一个config文件来说明哪个ssh key对应哪个git账号。如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Host jslite.github.com</div><div class="line">HostName github.com</div><div class="line">User git</div><div class="line">IdentityFile ~/.ssh/github_jslite</div><div class="line"></div><div class="line">Host abc.gitlab</div><div class="line">HostName gitlab.com</div><div class="line">IdentityFile ~/.ssh/github_abc</div></pre></td></tr></table></figure></p>
<p>然后测试各自是否联通即可</p>
<p>4) 需要注意的一点是 如果你原来一个账号配置了git config –global user.name/email，这种情况则最好取消全局设置，因为你git pull/push的时候会以你全局名来进行。<br>解决方案则是在你当前repo下配置当前repo的用户名邮箱<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config user.name/email</div></pre></td></tr></table></figure></p>
<p>参考<br><a href="https://segmentfault.com/a/1190000002994742" target="_blank" rel="external">gitlab/github 多账户下设置 ssh keys</a><br><a href="http://memoryboxes.github.io/blog/2014/12/07/duo-ge-gitzhang-hao-zhi-jian-de-qie-huan/" target="_blank" rel="external">多个git账号之间的切换</a><br><a href="http://notes.seirhsiao.com/2016/01/24/2014-09-30-github-multiple-account-and-multiple-repository/" target="_blank" rel="external">如何同一台电脑配置多个git或github账号</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;多个git账号的配置和使用，如果你原来有一个git账号(比如用于github)，工作中又需要有另一个git账号则需要两个配置两套公钥来使用，当然如果工作中和自己用的两个git账号都是同一个邮箱的话，一套公钥配置到两个sshkey上就行了。&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>life lover</title>
    <link href="http://yoursite.com/2016/09/13/life-lover/"/>
    <id>http://yoursite.com/2016/09/13/life-lover/</id>
    <published>2016-09-12T16:26:17.000Z</published>
    <updated>2016-09-12T16:27:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>热爱生活</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;热爱生活&lt;/p&gt;

    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>javascript函数</title>
    <link href="http://yoursite.com/2016/07/24/javascript%E5%87%BD%E6%95%B0/"/>
    <id>http://yoursite.com/2016/07/24/javascript函数/</id>
    <published>2016-07-24T08:57:18.000Z</published>
    <updated>2016-07-24T08:58:54.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JavaScript函数"><a href="#JavaScript函数" class="headerlink" title="JavaScript函数"></a>JavaScript函数</h1><h3 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h3><ol>
<li>函数其实也是一个对象，函数名是访问这个函数的指针，而非调用函数<strong>函数是对象，函数名是指针</strong></li>
<li>没有重载</li>
<li>函数声明和函数表达式，函数声明会被提前</li>
<li>函数的length对应其参数的数量</li>
</ol>
<h3 id="函数的内部属性和方法"><a href="#函数的内部属性和方法" class="headerlink" title="函数的内部属性和方法"></a>函数的内部属性和方法</h3><p>arguments和this<br>arguments是一个函数对象数组，保存传入函数的所有参数，<strong>arguments有一个callee的属性，是一个指针，指向拥有arguments对象的函数</strong><br><a id="more"></a></p>
<h4 id="callee"><a href="#callee" class="headerlink" title="callee"></a>callee</h4><p>举个栗子吧 eg1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function factorial(num)&#123;</div><div class="line">    if(num &lt;= 1)&#123;</div><div class="line">        return 1;</div><div class="line">    &#125;else&#123;</div><div class="line">        return num * factorial(num - 1);</div><div class="line">        //return num * arguments.callee(num - 1);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>上面这个是一个阶乘的计算方法，但是呢这样写有个不好的地方，在与这个函数的执行与函数名耦合在一起了，就是说，一般的function我们可以把函数名A赋值给B，这样B也指向了这个函数。<br>如果把A重写了，重新指向了一个新的函数，此时并不会影响B。<br>但是这里的话如果把<code>factorial()</code>函数重写了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">var factorial2 = factorial;</div><div class="line">factorial = function()&#123;return 0;&#125;</div></pre></td></tr></table></figure></p>
<p>如果factorial内部没有耦合函数名，则不影响factorial2的阶乘计算，但是很明显，当factorial重写后，factorial2指向的函数计算过程中<code>return num * factorial(num -1)</code>这个值就等于0了。<br>所以为了消除这样“函数的执行与函数名耦合在一起的问题，采用callee的方法来解决<em>callee这个指针指向拥有arguments对象的函数，即这里arguments.callee等同于当前的函数名</em>”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">return num * arguments.callee(num -  1);</div></pre></td></tr></table></figure></p>
<h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>this引用的是函数当前据以执行的环境对象。<br>简单的例子 eg2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">window.color = &quot;red&quot;;</div><div class="line">var o = &#123;color:&quot;blue&quot;&#125;;</div><div class="line">function sayColor()&#123;</div><div class="line">	alert(this.color);</div><div class="line">&#125;</div><div class="line">sayColor(); //red,this当前引用的是全局对象 window.sayColor(),此时this引用的是window对象，即this.color = window.color;</div><div class="line">o.sayColor = sayColor;</div><div class="line">o.sayColor(); //blue,此时this引用的对象是o,即this.color = o.color;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>函数名字仅仅是一个包含指针的变量而已，因此即使在不同的执行环境中，全局的sayColor()和o.sayColor()仍然是指向同一个函数。</p>
</blockquote>
<h4 id="caller"><a href="#caller" class="headerlink" title="caller"></a>caller</h4><p>在ES5中规范化了另一个函数对象的属性caller,这个属性保存着<strong>调用当前函数的函数引用</strong>。<br>eg3<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">function outer()&#123;</div><div class="line">	inner();</div><div class="line">&#125;</div><div class="line"></div><div class="line">function inner()&#123;</div><div class="line">	console.log(inner.caller);</div><div class="line">	// inner可以用arguments.callee代替 降低耦合度</div><div class="line">&#125;</div><div class="line">outer(); // 输出会显示outer的源代码</div></pre></td></tr></table></figure></p>
<h4 id="call-和apply"><a href="#call-和apply" class="headerlink" title="call()和apply()"></a>call()和apply()</h4><p>这两个函数用途都是在<em>在特定作用域中调用函数，实际上等于设置函数体内this值。</em><br>apply(当前运行函数的作用域，参数数组|arguments对象);<br>call(当前运行函数的作用域，参数1，参数2…)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">function sum(num1,num2)&#123;</div><div class="line">    return num1 + num2;</div><div class="line">&#125;</div><div class="line">function callSum1(num1,num2)&#123;</div><div class="line">    return sum.apply(this,arguments);</div><div class="line">&#125;</div><div class="line">function callSum2(num1,num2)&#123;</div><div class="line">    return sum.call(this,num1,num2);</div><div class="line">&#125;</div><div class="line">console.log(callSum1(10,10));</div><div class="line">console.log(callSum2(20,20));</div></pre></td></tr></table></figure></p>
<p>两者的区别在于传入参数的方式不一样<br>就上面eg2来说，可以通过call/apply的方式来改变当前函数的执行环境,扩充作用域<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sayColor.call(this);</div><div class="line">sayColor.call(window);</div><div class="line">sayColor.apply(o);</div><div class="line"></div><div class="line">// ES5 还提供了一个bind()方法</div><div class="line">var obSayColor = sayColor.bind(o);</div><div class="line">obSayColor();</div></pre></td></tr></table></figure></p>
<p>ES5 还提供了一个bind()方法，创建一个函数的实例，将this值绑定传到bind()函数的值。</p>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>函数是对象，函数名是指针，指向函数</li>
<li>函数的两个属性arguments this</li>
<li>函数的两个方法call() apply()以及bind()</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;JavaScript函数&quot;&gt;&lt;a href=&quot;#JavaScript函数&quot; class=&quot;headerlink&quot; title=&quot;JavaScript函数&quot;&gt;&lt;/a&gt;JavaScript函数&lt;/h1&gt;&lt;h3 id=&quot;基本知识&quot;&gt;&lt;a href=&quot;#基本知识&quot; class=&quot;headerlink&quot; title=&quot;基本知识&quot;&gt;&lt;/a&gt;基本知识&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;函数其实也是一个对象，函数名是访问这个函数的指针，而非调用函数&lt;strong&gt;函数是对象，函数名是指针&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;没有重载&lt;/li&gt;
&lt;li&gt;函数声明和函数表达式，函数声明会被提前&lt;/li&gt;
&lt;li&gt;函数的length对应其参数的数量&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;函数的内部属性和方法&quot;&gt;&lt;a href=&quot;#函数的内部属性和方法&quot; class=&quot;headerlink&quot; title=&quot;函数的内部属性和方法&quot;&gt;&lt;/a&gt;函数的内部属性和方法&lt;/h3&gt;&lt;p&gt;arguments和this&lt;br&gt;arguments是一个函数对象数组，保存传入函数的所有参数，&lt;strong&gt;arguments有一个callee的属性，是一个指针，指向拥有arguments对象的函数&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>编写可维护的JavaScript 笔记二</title>
    <link href="http://yoursite.com/2016/06/04/%E7%BC%96%E5%86%99%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84JavaScript-%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>http://yoursite.com/2016/06/04/编写可维护的JavaScript-笔记二/</id>
    <published>2016-06-04T02:53:53.000Z</published>
    <updated>2016-06-04T02:54:39.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="抛出自定义错误"><a href="#抛出自定义错误" class="headerlink" title="抛出自定义错误"></a>抛出自定义错误</h3><p>try…catch throw </p>
<h3 id="不是你的对象不要动"><a href="#不是你的对象不要动" class="headerlink" title="不是你的对象不要动"></a>不是你的对象不要动</h3><p>如果你的代码没有创建这些对象，不要修改他们</p>
<ul>
<li>原声对象Object Array等</li>
<li>DOM对象</li>
<li>BOM对象</li>
<li>类库对象å</li>
</ul>
<p>处理原则：</p>
<ul>
<li>不覆盖方法</li>
<li>不新增方法</li>
<li>不删除方法</li>
</ul>
<p>好的处理方法：<br>对象的继承</p>
<h3 id="浏览器嗅探"><a href="#浏览器嗅探" class="headerlink" title="浏览器嗅探"></a>浏览器嗅探</h3><p>navigator.userAgent</p>
<h3 id="文件和目录结构"><a href="#文件和目录结构" class="headerlink" title="文件和目录结构"></a>文件和目录结构</h3><p>基本结构<br>JavaScript文件目录下放置如下三个目录</p>
<ul>
<li>build 最终构建后的文件</li>
<li>src 源文件</li>
<li>test(s) 测试文件</li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>自动化 测试 部署  文件压缩精简 等内容</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;抛出自定义错误&quot;&gt;&lt;a href=&quot;#抛出自定义错误&quot; class=&quot;headerlink&quot; title=&quot;抛出自定义错误&quot;&gt;&lt;/a&gt;抛出自定义错误&lt;/h3&gt;&lt;p&gt;try…catch throw &lt;/p&gt;
&lt;h3 id=&quot;不是你的对象不要动&quot;&gt;&lt;a href=&quot;#
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>编写可维护的JavaScript-笔记一</title>
    <link href="http://yoursite.com/2016/05/31/%E7%BC%96%E5%86%99%E5%8F%AF%E7%BB%B4%E6%8A%A4%E7%9A%84JavaScript-%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://yoursite.com/2016/05/31/编写可维护的JavaScript-笔记一/</id>
    <published>2016-05-30T16:01:27.000Z</published>
    <updated>2016-05-30T16:12:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="基本格式化"><a href="#基本格式化" class="headerlink" title="基本格式化"></a>基本格式化</h3><p>1 程序是让人读的，只是偶尔让计算机执行一下。<br>2 编程风格style guideline 编程规范 code convention<br>3 code review工具使用 JSLint JSHint<br>4 命名<br>4.1 驼峰写法 thisIsName<br>4.2 变量命名应当名词前缀，函数方法命名应当动词前缀<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 好的写法</div><div class="line">var count = 10;</div><div class="line">var myName = &quot;lifesimple&quot;;</div><div class="line"></div><div class="line">// 不好的写法,变量看起来像函数</div><div class="line">var getCount = 10;</div><div class="line">var isFound = true;</div><div class="line"></div><div class="line">// 好的写法</div><div class="line">function getName()&#123;</div><div class="line">	return myName;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 不好的写法，函数看起来像变量</div><div class="line">function theName()&#123;</div><div class="line">	return myName;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h3 id="变量和函数的写法"><a href="#变量和函数的写法" class="headerlink" title="变量和函数的写法"></a>变量和函数的写法</h3><p>4.3 构造函数 驼峰大小写 字母大写开头<br>4.4 null undefined</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>1 一种通行的代码注释原则，当代码不够清晰时候添加注释，若是代码能清晰表示所表达的意思则不需要注释。<br>比如 getGoodsId() 代码能知道这是获取商品信息，则不必要加注释。<br>2 可能被误认为的错误代码，自己写的代码如果方法用的生僻或者解决方案在别的开发看来可能是不对的，这个时候需要加上注释说明，防止被误认为错误代码而别修改<br>3 浏览器HACK 这方面，写代码的时候要注释说明写的代码在什么条件下哪些浏览器适用。不然日子久了，自己可能也不清楚自己写的这些代码为什么在其他版本浏览器报错呢。<br>4 文档注释，注释说明一个function 的作用，参数含义和返回数据<br>sublime text3有个插件DocBlockr，写完function 添加说明文档注释</p>
<h3 id="语句和表达式"><a href="#语句和表达式" class="headerlink" title="语句和表达式"></a>语句和表达式</h3><p>注意if else swtich for() for in语句的用法和写法</p>
<h3 id="变量-函数和运算符"><a href="#变量-函数和运算符" class="headerlink" title="变量  函数和运算符"></a>变量  函数和运算符</h3><p>1 变量声明var  提前<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function doSomething()&#123;</div><div class="line">	var result = value + 10;</div><div class="line">	var value = 10;</div><div class="line">	return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>但这段代码 依旧返回NaN,上面代码相当于<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">function doSomething()&#123;</div><div class="line">	var result;</div><div class="line">	var value;</div><div class="line"></div><div class="line">	result = value + 10; // 此时value = undefined</div><div class="line">	value = 10;</div><div class="line">	return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>var value; 此时为undefined 所以…NaN</p>
<p>变量声明提前意味着：在函数内部任意地方定义变量和在函数顶部定义变量是完全一样的。所以好的习惯是将所有的变量声明都放在函数的顶部而不是散落在各个角落，这种风格的代码逻辑和JavaScript引擎解析习惯是一样的。</p>
<p>2 单var 声明语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var value = 10;</div><div class="line">var result = value + 10;</div><div class="line">var i;</div><div class="line">var len;</div><div class="line"></div><div class="line">var value = 10,</div><div class="line">     result = value + 10,</div><div class="line">    i,</div><div class="line">    len;</div></pre></td></tr></table></figure></p>
<p>赋值运算符对齐，没有初始值的变量应当出现在var语句的结尾如上面的i,len</p>
<p>3 函数声明<br>1 和变量声明一样会被提前，应当先声明函数再使用函数。函数内部声明函数紧接着变量声明函数。<br>函数声明不要出现在语句块中。</p>
<p>2 自执行匿名函数 外面要加大括号<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 不好的写法</div><div class="line">// 这样会容易让人误以为是一个函数赋值给了一个变量</div><div class="line">var a = function()&#123;</div><div class="line">    return&#123;</div><div class="line">        message:&quot;Hi&quot;</div><div class="line">    &#125;</div><div class="line">&#125;()；</div><div class="line"></div><div class="line">// 应该外加一个大括号 这样人家一看就知道是函数执行结果赋值给变量</div><div class="line">var a = (function()&#123;</div><div class="line">    return &#123;message:&quot;Hi&quot;&#125;</div><div class="line">&#125;());</div></pre></td></tr></table></figure></p>
<p>3 严格模式 ES5 “use strict”<br>不要在全局作用域中使用，不然会作用到全局，哪个局部作用域需要加入。</p>
<p>4 相等，== ！= === ！== 了解类型强制转换，在一些场合判断相等不相等 用恒等去判断</p>
<p>5 eval() 少用 避免，性能和安全性相关的问题  </p>
<h3 id="避免全局变量"><a href="#避免全局变量" class="headerlink" title="避免全局变量"></a>避免全局变量</h3><p>1 全局变量污染 容易出错 难以维护<br>2 最佳方法依赖尽可能少的全局变量，即只创建一个全局变量 单全局变量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">var a;</div><div class="line">var b;</div><div class="line">var c;</div><div class="line">a = ...;b= ..;c = ...;</div><div class="line"></div><div class="line">var myValue = &#123;&#125;;</div><div class="line">myValue.a = </div><div class="line">myValue.b = </div><div class="line">myValue.c =</div></pre></td></tr></table></figure></p>
<p>3 namespace() 方法 命名空间<br>4 模块化（AMD CMD）</p>
<h3 id="事件处理"><a href="#事件处理" class="headerlink" title="事件处理"></a>事件处理</h3><p>两个规则：<br>隔离应用逻辑<br>不要分发事件对象</p>
<p>不是很理解，多看看给的demo</p>
<h3 id="避免空比较"><a href="#避免空比较" class="headerlink" title="避免空比较"></a>避免空比较</h3><p>1 不要直接将变量和null做比较，若一定要比较通过<code>===</code> <code>!==</code><br>2 通过typeof检测基础数据类型<br>3 通过instanceof检测引用值类型<br>4 通过typeof myFunc === “function”检测函数，instanceof不能跨帧（frame）但是typeof可以</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;基本格式化&quot;&gt;&lt;a href=&quot;#基本格式化&quot; class=&quot;headerlink&quot; title=&quot;基本格式化&quot;&gt;&lt;/a&gt;基本格式化&lt;/h3&gt;&lt;p&gt;1 程序是让人读的，只是偶尔让计算机执行一下。&lt;br&gt;2 编程风格style guideline 编程规范 code convention&lt;br&gt;3 code review工具使用 JSLint JSHint&lt;br&gt;4 命名&lt;br&gt;4.1 驼峰写法 thisIsName&lt;br&gt;4.2 变量命名应当名词前缀，函数方法命名应当动词前缀&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 好的写法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var count = 10;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var myName = &amp;quot;lifesimple&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 不好的写法,变量看起来像函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var getCount = 10;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var isFound = true;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 好的写法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function getName()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	return myName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 不好的写法，函数看起来像变量&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function theName()&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	return myName;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>npm install npm -g然后挂了</title>
    <link href="http://yoursite.com/2016/04/25/npm-install-npm-g%E7%84%B6%E5%90%8E%E6%8C%82%E4%BA%86/"/>
    <id>http://yoursite.com/2016/04/25/npm-install-npm-g然后挂了/</id>
    <published>2016-04-25T15:40:00.000Z</published>
    <updated>2016-04-25T15:43:54.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>OS X想通过命令行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">npm install npm -g/ npm update -g</div></pre></td></tr></table></figure>
<p>提示好像是没有权限吧，恩，全局安装又忘了加<code>sudo</code></p>
<p>然而再次执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">sudo npm install npm -g</div></pre></td></tr></table></figure>
<p>然而没反应啊，显示</p>
<p><code>-bash: /usr/local/bin/npm: No such file or directory</code></p>
<p>大概就是这样的</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$ npm update npm -g</div><div class="line">npm http GET https://registry.npmjs.org/npm</div><div class="line">npm http 304 https://registry.npmjs.org/npm</div><div class="line">npm http GET https://registry.npmjs.org/npm/1.4.4</div><div class="line">npm http 304 https://registry.npmjs.org/npm/1.4.4</div><div class="line">npm ERR! error rolling back Error: Refusing to delete: /usr/local/bin/npm not in /usr/local/lib/node_modules/npm</div><div class="line">npm ERR! error rolling back     at clobberFail (/usr/local/Cellar/node/0.10.26/lib/node_modules/npm/lib/utils/gently-rm.js:57:12)</div><div class="line">npm ERR! error rolling back     at next (/usr/local/Cellar/node/0.10.26/lib/node_modules/npm/lib/utils/gently-rm.js:43:14)</div><div class="line">npm ERR! error rolling back     at /usr/local/Cellar/node/0.10.26/lib/node_modules/npm/lib/utils/gently-rm.js:52:12</div><div class="line">npm ERR! error rolling back     at Object.oncomplete (fs.js:107:15)</div><div class="line">npm ERR! error rolling back  npm@1.4.4 &#123; [Error: Refusing to delete: /usr/local/bin/npm not in /usr/local/lib/node_modules/npm] code: &apos;EEXIST&apos;, path: &apos;/usr/local/bin/npm&apos; &#125;</div><div class="line">npm ERR! Refusing to delete: /usr/local/bin/npm not in /usr/local/lib/node_modules/npm</div><div class="line">File exists: /usr/local/bin/npm</div><div class="line">Move it away, and try again. </div><div class="line"></div><div class="line">npm ERR! System Darwin 13.1.0</div><div class="line">npm ERR! command &quot;/usr/local/Cellar/node/0.10.26/bin/node&quot; &quot;/usr/local/bin/npm&quot; &quot;update&quot; &quot;npm&quot; &quot;-g&quot;</div><div class="line">npm ERR! cwd /Users/dan/Google Drive/Projects/dotfiles</div><div class="line">npm ERR! node -v v0.10.26</div><div class="line">npm ERR! npm -v 1.4.3</div><div class="line">npm ERR! path /usr/local/bin/npm</div><div class="line">npm ERR! code EEXIST</div><div class="line">npm ERR! </div><div class="line">npm ERR! Additional logging details can be found in:</div><div class="line">npm ERR!     /Users/dan/Google Drive/Projects/dotfiles/npm-debug.log</div><div class="line">npm ERR! not ok code 0</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="寻求解决"><a href="#寻求解决" class="headerlink" title="寻求解决"></a>寻求解决</h3><p><a href="https://github.com/npm/npm/issues/4099" target="_blank" rel="external">github issue npm update -g has broken npm#4099</a></p>
<p>这里面其中有人提到可以通过下面命令行来获取重新安装npm</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">curl -L http://npmjs.org/install.sh | sudo sh</div></pre></td></tr></table></figure>
<p>试了一下，成功了。</p>
<p>但是有两个问题</p>
<p>1 为什么这样就行了？ 上述命令行下载npm重新安装即可。</p>
<p>2 为什么 通过<code>npm install npm -g</code>升级（忘记加sudo）就挂了，讲道理以前这种情况，基本上是给个提示的么，然后正确操作即可。</p>
<p>贴几个社区讨论的地址</p>
<p><a href="https://gist.github.com/DanHerbert/9520689" target="_blank" rel="external">Fixing npm On Mac OS X for Homebrew Users</a></p>
<p><a href="https://github.com/npm/npm/issues/3794" target="_blank" rel="external">Error: Refusing to delete: /usr/local/bin/npm #3794</a></p>
<blockquote>
<p>If you’re a Homebrew user and you installed node via Homebrew, there is a major philosophical issue with the way Homebrew and NPM work together. If you install node with Homebrew and then try to do npm update npm -g, you may see an error like this:</p>
<p>There’s an NPM bug for this exact problem. The bug has been “fixed” by Homebrew installing npm in a way that allows it to manage itself once the install is complete. However, this is error-prone and still seems to cause problems for some people. The root of the the issue is really that npm is its own package manager and it is therefore better to have npm manage itself and its packages completely on its own instead of letting Homebrew do it.</p>
<p>Also, using the Homebrew installation of npm will require you to use sudo when installing global packages. Since one of the core ideas behind Homebrew is that apps can be installed without giving them root access, this is a bad idea.</p>
</blockquote>
<p>先说下<a href="http://brew.sh/" target="_blank" rel="external">Homebrew</a>(家酿 好名字)，就是Mac OSX的软件包管理工具，可以通过<code>brew</code>命令在os x中安装或卸载软件很方便，类似于Ubuntu中的<code>apt-get</code>命令吧。表示从来没用过… 命令行安装软件确实挺酷的</p>
<p>我对上面问题分析的理解是：OS X中node好像是自带就有的，是通过homebrew的方式安装的，npm也是通过homebrew的安装的，那么问题来了，npm本身也是一个包管理工具。</p>
<p><code>npm install npm -g</code>可能并不是通过npm的方式去安装升级自己，而是通过<code>brew</code>的方式去安装，因为安装的是全局变没有加sudo所以导致npm的安装失败并使得npm broken。</p>
<p>所以有人建议</p>
<blockquote>
<p>I still recommend to get homebrew to manage node, and get npm to manage itself. If you do npm install -gf npm, probably you will get into trouble when there is a new version of npm available from homebrew, and you do brew upgrade.</p>
<p>npm can manage the update of itself, so it does not make much sense to get homebrew to manage npm. However, manually update nodejs is painful. Therefore, I think it’s best to get homebrew to manage nodejs, and get npm to manage itself.</p>
</blockquote>
<p>npm和homebrew独立开，不要通过homebrew的方式来安装npm。</p>
<h3 id="一些知识点"><a href="#一些知识点" class="headerlink" title="一些知识点"></a>一些知识点</h3><p>curl命令行：curl是一个命令行工具，作用是发出网络请求，然后得到和提取数据显示在标准输出stdout上。</p>
<p><a href="http://www.ruanyifeng.com/blog/2011/09/curl.html" target="_blank" rel="external">阮一峰  curl网站开发指南</a></p>
<p><a href="http://blog.51yip.com/linux/1049.html" target="_blank" rel="external">inux curl 命令详解，以及实例</a></p>
<p><a href="http://www.cnblogs.com/TankXiao/p/3247113.html" target="_blank" rel="external">Homebrew的安装与使用</a></p>
<p><a href="http://col.dog/2015/11/22/homebrew/" target="_blank" rel="external">Mac下的软件安装</a></p>
<p><a href="http://www.yangzhiping.com/tech/homebrew-cask.html" target="_blank" rel="external">Mac安装软件新方法 Homebrew-cask</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h3&gt;&lt;p&gt;OS X想通过命令行&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install npm -g/ npm update -g&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;提示好像是没有权限吧，恩，全局安装又忘了加&lt;code&gt;sudo&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;然而再次执行&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;sudo npm install npm -g&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然而没反应啊，显示&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-bash: /usr/local/bin/npm: No such file or directory&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;大概就是这样的&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$ npm update npm -g&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm http GET https://registry.npmjs.org/npm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm http 304 https://registry.npmjs.org/npm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm http GET https://registry.npmjs.org/npm/1.4.4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm http 304 https://registry.npmjs.org/npm/1.4.4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! error rolling back Error: Refusing to delete: /usr/local/bin/npm not in /usr/local/lib/node_modules/npm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! error rolling back     at clobberFail (/usr/local/Cellar/node/0.10.26/lib/node_modules/npm/lib/utils/gently-rm.js:57:12)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! error rolling back     at next (/usr/local/Cellar/node/0.10.26/lib/node_modules/npm/lib/utils/gently-rm.js:43:14)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! error rolling back     at /usr/local/Cellar/node/0.10.26/lib/node_modules/npm/lib/utils/gently-rm.js:52:12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! error rolling back     at Object.oncomplete (fs.js:107:15)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! error rolling back  npm@1.4.4 &amp;#123; [Error: Refusing to delete: /usr/local/bin/npm not in /usr/local/lib/node_modules/npm] code: &amp;apos;EEXIST&amp;apos;, path: &amp;apos;/usr/local/bin/npm&amp;apos; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! Refusing to delete: /usr/local/bin/npm not in /usr/local/lib/node_modules/npm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;File exists: /usr/local/bin/npm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Move it away, and try again. &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! System Darwin 13.1.0&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! command &amp;quot;/usr/local/Cellar/node/0.10.26/bin/node&amp;quot; &amp;quot;/usr/local/bin/npm&amp;quot; &amp;quot;update&amp;quot; &amp;quot;npm&amp;quot; &amp;quot;-g&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! cwd /Users/dan/Google Drive/Projects/dotfiles&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! node -v v0.10.26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! npm -v 1.4.3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! path /usr/local/bin/npm&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! code EEXIST&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! Additional logging details can be found in:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR!     /Users/dan/Google Drive/Projects/dotfiles/npm-debug.log&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm ERR! not ok code 0&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="问题" scheme="http://yoursite.com/categories/%E9%97%AE%E9%A2%98/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>git学习笔记(三)之分支学习</title>
    <link href="http://yoursite.com/2016/03/23/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%89-%E4%B9%8B%E5%88%86%E6%94%AF%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2016/03/23/git学习笔记-三-之分支学习/</id>
    <published>2016-03-23T12:15:17.000Z</published>
    <updated>2016-03-23T12:15:56.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B" target="_blank" rel="external">学习参考-pro git分支介绍</a><br>Git相对于其他集中式版本管理系统对版本管理的差别在于，Git版本管理保存的不是文件的变化和差异而是一些列不同时刻的文件快照。</p>
<p><strong>Git的分支，本质上仅仅是指向提交对象的可变指针</strong></p>
<blockquote>
<p>git init初始化的默认分支 是master(并不是一个特殊分支)</p>
</blockquote>
<p>相关指令</p>
<ul>
<li><code>git branch</code>新建/查看分支</li>
<li><code>git checkout</code> 切换分支 加<code>-b</code>则是新建然后切换到该分支，切换分支时候确保当前分支下的内容要提交完成，不能切换时候也会提示你。</li>
<li><code>git log --oneline --decorate</code> 查看当前分支所知对象，加<code>--graph --all</code>查看分叉历史</li>
<li><code>git merge</code>合并分支，有不能自动合并的冲突时，需要手动merge然后<code>git add</code>提交代码 </li>
<li><code>git branch --merged/--no--merged</code>，这两个指令过滤当前分支列表中已经合并或者未合并到当前分支的分支</li>
<li><code>git branch -d/-D</code> <code>-d</code>删除已经合并的分支，<code>-D</code>强行删除那些还没有合并的分支丢掉那些工作</li>
</ul>
<p>其他</p>
<ul>
<li>git分支开发流的应用</li>
<li>远程分支</li>
<li>变基<code>git rebase</code></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;学习参考-
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>各种资源</title>
    <link href="http://yoursite.com/2016/03/18/%E5%90%84%E7%A7%8D%E8%B5%84%E6%BA%90/"/>
    <id>http://yoursite.com/2016/03/18/各种资源/</id>
    <published>2016-03-17T16:09:00.000Z</published>
    <updated>2016-03-17T16:11:44.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="记录一些好的资源，备忘"><a href="#记录一些好的资源，备忘" class="headerlink" title="记录一些好的资源，备忘"></a>记录一些好的资源，备忘</h3><h4 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h4><p>1 <a href="http://yotuku.cn/" target="_blank" rel="external">yotuku</a><br>这个图床不错的，也可以设置到七牛图床，可以复制粘贴，相当好用。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;记录一些好的资源，备忘&quot;&gt;&lt;a href=&quot;#记录一些好的资源，备忘&quot; class=&quot;headerlink&quot; title=&quot;记录一些好的资源，备忘&quot;&gt;&lt;/a&gt;记录一些好的资源，备忘&lt;/h3&gt;&lt;h4 id=&quot;工具类&quot;&gt;&lt;a href=&quot;#工具类&quot; class=&quot;he
    
    </summary>
    
      <category term="杂记" scheme="http://yoursite.com/categories/%E6%9D%82%E8%AE%B0/"/>
    
    
      <category term="杂记" scheme="http://yoursite.com/tags/%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>git学习笔记(二)</title>
    <link href="http://yoursite.com/2016/03/18/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%BA%8C/"/>
    <id>http://yoursite.com/2016/03/18/git学习笔记-二/</id>
    <published>2016-03-17T16:02:43.000Z</published>
    <updated>2016-03-17T16:07:38.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="新建并连接远程库"><a href="#新建并连接远程库" class="headerlink" title="新建并连接远程库"></a>新建并连接远程库</h3><ol>
<li><p>在github上新建一个仓库 比如learnnote<br><img src="http://7vij1u.com1.z0.glb.clouddn.com/16-3-17/1990950.jpg" alt=""></p>
</li>
<li><p>在本地添加远程仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin https://github.com/lifesimple/learnnote.git</div></pre></td></tr></table></figure>
</li>
</ol>
<h3 id="本地与远程库的代码管理与同步"><a href="#本地与远程库的代码管理与同步" class="headerlink" title="本地与远程库的代码管理与同步"></a>本地与远程库的代码管理与同步</h3><p>因为新建的时候随手建了一个readme.md的文件，此时本地仓库是空的，远程origin是有一个文件的。所以这个时候，我们先获取一下远程库的内容。<br>遇到的一些问题<br>1) 我用<code>git fetch origin</code>并不能把新建仓库中的readme.md给获取下来，这是为什么？<br>2) 用<code>git pull orgin master</code>就可以把内容获取下来<br>3) <code>git diff</code>没用对 ？</p>
<blockquote>
<p>lifesimple:test jingxiao$ git diff master origin/master<br>fatal: ambiguous argument ‘master’: unknown revision or path not in the working tree.<br>Use ‘–’ to separate paths from revisions, like this:<br>‘git <command> [<revision>…] – [<file>…]’<br>lifesimple:test jingxiao$</file></revision></p>
</blockquote>
<p>用的话，按教程就用git pull=(fetch+merge)来处理，这样就能行了。<br><img src="http://7vij1u.com1.z0.glb.clouddn.com/16-3-17/23809283.jpg" alt=""><br><img src="http://7vij1u.com1.z0.glb.clouddn.com/16-3-18/78184558.jpg" alt=""><br>本地管理，然后提交到远程库就ok了。</p>
<p>对git的分支啥的还是很不了解，以前甚至还搞不清楚master origin哪个是本地的哪个是远程的。<br><strong>只知道这么正确的操作是不够的，得知道为什么上面的问题，求指教谢谢。</strong><br>把这本<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">pro git指南看看掉应该就够了</a><br><em>工具这东西，得多用才行，用得多了菜的坑才能多，才能有点长进吧。</em></p>
<h3 id="为什么学习git"><a href="#为什么学习git" class="headerlink" title="为什么学习git"></a>为什么学习git</h3><p>在<a href="https://segmentfault.com/q/1010000004591949" target="_blank" rel="external">sf上提过一个问题git要比svn好在哪里？</a><br>相对来说，1) 分布式没有所谓中央服务器，每台机子都是一个版本库，相对安全；2) 离线使用，git可以本地版本管理，svn需要联网(局域网)<br>但也不能就说哪个就好了，还是看使用场景，毕竟svn相比于git简单容易上手许多。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;新建并连接远程库&quot;&gt;&lt;a href=&quot;#新建并连接远程库&quot; class=&quot;headerlink&quot; title=&quot;新建并连接远程库&quot;&gt;&lt;/a&gt;新建并连接远程库&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在github上新建一个仓库 比如learnnote&lt;br&gt;&lt;img sr
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>web移动端学习笔记(一)</title>
    <link href="http://yoursite.com/2016/03/16/web%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://yoursite.com/2016/03/16/web移动端学习笔记-一/</id>
    <published>2016-03-15T16:38:26.000Z</published>
    <updated>2016-03-15T16:40:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一点感想"><a href="#一点感想" class="headerlink" title="一点感想"></a>一点感想</h3><p>入行前端快两年了，一直埋头写代码什么的，抬头一看这个行业技术更新不要太快，当我刚知道grunt自动化部署啥的时候，大家都在说gulp好用，当我要开始学gulp的时候，大家又去用webpack了。<br>总之，是时候要跟一波节奏了，不能总是用jquery写业务代码吧，多跟进一些优秀的新技术新框架库什么，多和这个行业交流，总之要提高要进步吧。</p>
<p>开始学习移动端web的相关知识吧，参考一些网上的教程以及一些学习视频做一段快速入门吧。有什么好的书籍推荐的么？</p>
<h3 id="先收集一波资源做入门吧"><a href="#先收集一波资源做入门吧" class="headerlink" title="先收集一波资源做入门吧"></a>先收集一波资源做入门吧</h3><p><a href="http://www.imooc.com/learn/494" target="_blank" rel="external">慕课网-Hello,Web移动端</a><br><a href="https://www.v2ex.com/t/233335" target="_blank" rel="external">V2EX上的一个移动端入门的资源帖</a><br><a href="http://www.html-js.com/article/Mobile-terminal-H5-mobile-terminal-HD-multi-screen-adaptation-scheme%203041" target="_blank" rel="external">前端乱炖-移动端高清、多屏适配方案</a><br><a href="https://www.zybuluo.com/hacke2/note/45079" target="_blank" rel="external">移动web常见名词</a><br><a href="https://www.zhihu.com/question/20269059" target="_blank" rel="external">知乎-移动前端开发和 Web 前端开发的区别是什么?</a></p>
<h3 id="web移动端的尺寸单位"><a href="#web移动端的尺寸单位" class="headerlink" title="web移动端的尺寸单位"></a>web移动端的尺寸单位</h3><p>px-CSS pixels 逻辑像素，浏览器使用的抽象单位<br>dp,pt-device independent pixels 设备无关像素<br>dpr-devicePixelRatio 设备像素缩放<br>DPI-打印机每英寸可以喷的墨汁点（印刷行业）<br>PPI-屏幕每英寸像素数量，单位英寸内的像素密度</p>
<blockquote>
<p>1px = (dpr)<sup>2</sup>*dp</p>
</blockquote>
<p><img src="http://7vij1u.com1.z0.glb.clouddn.com/16-3-16/13581344.jpg" alt=""></p>
<h3 id="viewport的理解和作用"><a href="#viewport的理解和作用" class="headerlink" title="viewport的理解和作用"></a>viewport的理解和作用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,initial-scale=1,user-scalable=no&quot;&gt;</div></pre></td></tr></table></figure>
<p><img src="http://7vij1u.com1.z0.glb.clouddn.com/16-3-16/96962031.jpg" alt=""><br>visual viewport:度量/视口 viewport<br>layout viewport:布局viewport<br>PC页面是怎么渲染viewport中的?</p>
<blockquote>
<p>页面调试可以通过chrome devTool选择各设备模拟查看</p>
</blockquote>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>因为移动端的地方小，所以一般页面针对移动端重新设计或者优化就尽量砍掉那些不重要的点，做减法。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;一点感想&quot;&gt;&lt;a href=&quot;#一点感想&quot; class=&quot;headerlink&quot; title=&quot;一点感想&quot;&gt;&lt;/a&gt;一点感想&lt;/h3&gt;&lt;p&gt;入行前端快两年了，一直埋头写代码什么的，抬头一看这个行业技术更新不要太快，当我刚知道grunt自动化部署啥的时候，大家都在说
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="移动端" scheme="http://yoursite.com/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>git学习笔记(一)</title>
    <link href="http://yoursite.com/2016/03/15/git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E4%B8%80/"/>
    <id>http://yoursite.com/2016/03/15/git学习笔记-一/</id>
    <published>2016-03-14T16:09:51.000Z</published>
    <updated>2016-03-14T17:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="创建一个git版本库"><a href="#创建一个git版本库" class="headerlink" title="创建一个git版本库"></a>创建一个git版本库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git init</div><div class="line">git add readme.txt</div><div class="line">git commit -m &apos;add a readme txt&apos;</div></pre></td></tr></table></figure>
<p>通过<code>git status</code>查看当前库状态<br><code>git commit</code>加上<code>-m</code> 说明本次提交的更改情况，如果不加这个参数直接提交会怎么样呢，会这样，自动启动一个编辑器(如下是vim)还是得让你写点东西吧。</p>
<p><img src="http://7vij1u.com1.z0.glb.clouddn.com/16-3-15/22408369.jpg" alt="如果直接git commit"></p>
<h3 id="本地版本管理"><a href="#本地版本管理" class="headerlink" title="本地版本管理"></a>本地版本管理</h3><ol>
<li><p><code>git status</code> <code>git diff</code><br>这两个指令帮你了解当前库修改变动和提交状态。</p>
<p><img src="http://7vij1u.com1.z0.glb.clouddn.com/16-3-15/12235118.jpg" alt="git status"></p>
</li>
<li><p><code>git log</code> <code>git reset</code><br>git log版本记录，<br>git reset 时光穿梭机版本回退</p>
<p><img src="http://7vij1u.com1.z0.glb.clouddn.com/16-3-15/92997676.jpg" alt="git reset"> </p>
<blockquote>
<p>HEAD表示当前版本，HEAD^上一版本，HEAD^^上上版本，HEAD~100上*100个版本。<br>至于参数–hard什么意思，可以参考<a href="http://stackoverflow.com/questions/3528245/whats-the-difference-between-git-reset-mixed-soft-and-hard" target="_blank" rel="external">stackoverflow –mixed soft hard</a></p>
</blockquote>
</li>
<li><p><strong>工作区 暂存区和版本库的理解</strong><br><img src="http://blog.chinaunix.net/attachment/201402/19/10415985_139279770639pM.jpg" alt=""></p>
</li>
<li><p><code>git add</code>把修改的文件放入暂存区，<code>git commit</code>把暂存区的文件提交到版本库中。<br>所以要是<br><em>第一次修改-&gt; git add-&gt;第二次修改-&gt;git commit</em><br>这种情况下并不会提交第二次修改的内容</p>
<p><img src="http://7vij1u.com1.z0.glb.clouddn.com/16-3-15/60103967.jpg" alt="git commit提交暂存区内容"><br>这种情况继续提交即可。</p>
</li>
<li><p>git checkout<br>没提交前后悔了<br>两种情况，1）还没提交到暂存区，即没有<code>git add</code><br>2) <code>git add</code>了，但是没有提交到版本库，没有<code>git commit</code><br>第一种情况直接<code>git checkout -- readme.txt</code>舍弃修改<br>第二种情况，通过<code>git reset</code>撤销暂存区修改<br><img src="http://7vij1u.com1.z0.glb.clouddn.com/16-3-15/65141448.jpg" alt="checkout"></p>
</li>
<li><p>git rm<br>不要了<br><code>git rm</code>然后<code>git commit</code>,但是还是可以通过<code>git checkout</code>找回来</p>
<p><img src="http://7vij1u.com1.z0.glb.clouddn.com/16-3-15/52959431.jpg" alt="git rm"></p>
</li>
</ol>
<p><a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">笔记参考学习自廖雪峰老师的git教程</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;创建一个git版本库&quot;&gt;&lt;a href=&quot;#创建一个git版本库&quot; class=&quot;headerlink&quot; title=&quot;创建一个git版本库&quot;&gt;&lt;/a&gt;创建一个git版本库&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>jquery ajax数据请求和返回</title>
    <link href="http://yoursite.com/2016/02/23/jquery-ajax%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>http://yoursite.com/2016/02/23/jquery-ajax数据处理/</id>
    <published>2016-02-23T14:41:53.000Z</published>
    <updated>2016-02-23T15:16:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚接触学会用jQuery ajax的时候，觉得真东西好神奇，这样就可以把数据取回来了啊。然后我可以把取回来的数据渲染到页面上，一颗赛艇。<br>之前很早接触到项目，并不知道怎么优雅的去用jquery ajax（现在也不优雅）；<br>那个时候看别人写的代码<br>有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.post(&quot;&quot;,&quot;&quot;,...)</div></pre></td></tr></table></figure></p>
<p>也有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.get(&quot;&quot;,&quot;&quot;,...)</div></pre></td></tr></table></figure></p>
<p>还有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$.ajax()</div></pre></td></tr></table></figure></p>
<p>当然现在知道点，这些写法都是一个意思，还是习惯用<code>$.ajax()</code>写写吧。<br>之前的数据处理，发送数据请求(json的数据格式)，然后自己通过下面的方式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var request = &#123;&#125;;</div><div class="line">request.name = $(&quot;.name&quot;).val();</div><div class="line">request.age = $(&quot;.age&quot;).val();</div><div class="line">request.sex = $(&quot;.sex&quot;).val();</div><div class="line">//...</div></pre></td></tr></table></figure></p>
<p>当时表单发送的参数项少，所以没觉得什么，到后来一个表单很多项数，也这么写，结果<code>request</code>就手工写了好多行，虽然能用吧，但是看看这样的代码就觉着哪里不对劲吧，至少很不“优雅”。<br>后来，发现其实jquery有个<a href="http://api.jquery.com/serialize/" target="_blank" rel="external">serialize</a>的方法可以序列化表单数据，可以省事很多。<br><a href="http://www.w3school.com.cn/tiy/t.asp?f=jquery_ajax_serialize" target="_blank" rel="external">w3c_jquery_serialize-demo</a></p>
<p>处理返回数据，渲染到页面上去。<br>之前的做法也是和上面一模一样的吧，返回的数据是json数据格式的，然后分别取值赋值给页面元素，所以代码往往是这样的。<br><img src="http://ww3.sinaimg.cn/mw690/714d1b58jw1f19nehbr2jj20lc0av3zu.jpg" alt=""></p>
<p>如果数据再多点，真的是感觉略难看。其实应该是有更好的做法的，返回的是一个json对象，所以我们可以通过遍历对象的属性值取到所有值然后依次渲染到页面对应元素即可。<br>对象遍历可以用<code>for-in</code>来写（有更好的方法来写么？）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">	//...</div><div class="line">	success:function(result)&#123;</div><div class="line">		for(var v in result)&#123;</div><div class="line">			// 如果渲染的元素都是统一的输入框形式的话，</div><div class="line">			$(&quot;form&quot;).find(&quot;input[name=&quot;+ v +&quot;]&quot;).val(result[v]); </div><div class="line"></div><div class="line">			// 如果有其他元素 则另外单独校验处理</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line"></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>上面name(或者其他tag在页面中先写好，和返回数据的属性一致)。</p>
<p><a href="http://www.cnblogs.com/luoyanli/archive/2012/07/09/2582650.html" target="_blank" rel="external">另外摘记一个表单输入框中回车 自动提交的情况和处理方案</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;刚接触学会用jQuery ajax的时候，觉得真东西好神奇，这样就可以把数据取回来了啊。然后我可以把取回来的数据渲染到页面上，一颗赛艇。&lt;br&gt;之前很早接触到项目，并不知道怎么优雅的去用jquery ajax（现在也不优雅）；&lt;br&gt;那个时候看别人写的代码&lt;br&gt;有&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
      <category term="jquery" scheme="http://yoursite.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>浅谈闭包(一)</title>
    <link href="http://yoursite.com/2016/02/15/%E6%B5%85%E8%B0%88%E9%97%AD%E5%8C%85-%E4%B8%80/"/>
    <id>http://yoursite.com/2016/02/15/浅谈闭包-一/</id>
    <published>2016-02-15T00:35:39.000Z</published>
    <updated>2016-02-15T00:46:53.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="0什么是闭包？"><a href="#0什么是闭包？" class="headerlink" title="0什么是闭包？"></a>0什么是闭包？</h3><h3 id="1闭包的作用和副作用？"><a href="#1闭包的作用和副作用？" class="headerlink" title="1闭包的作用和副作用？"></a>1闭包的作用和副作用？</h3><h3 id="2理解闭包的运行机制？"><a href="#2理解闭包的运行机制？" class="headerlink" title="2理解闭包的运行机制？"></a>2理解闭包的运行机制？</h3><p>先放一段基础代码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">function compareObject(propertyName)&#123;</div><div class="line">    return function(obj1,obj2)&#123;</div><div class="line">        if(obj1.name &gt; obj2.name)&#123;</div><div class="line">            return 1;</div><div class="line">        &#125;else if(obj1.name &lt; obj2.name)&#123;</div><div class="line">            return -1;</div><div class="line">        &#125;else&#123;</div><div class="line">            return 0;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">var compare = compareObject(&apos;name&apos;),</div><div class="line">    result = compare(&#123;name:&apos;jing&apos;,age:10&#125;,&#123;name:&apos;xiao&apos;,age:10&#125;);</div><div class="line">console.log(result);</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0什么是闭包？&quot;&gt;&lt;a href=&quot;#0什么是闭包？&quot; class=&quot;headerlink&quot; title=&quot;0什么是闭包？&quot;&gt;&lt;/a&gt;0什么是闭包？&lt;/h3&gt;&lt;h3 id=&quot;1闭包的作用和副作用？&quot;&gt;&lt;a href=&quot;#1闭包的作用和副作用？&quot; class=&quot;he
    
    </summary>
    
      <category term="javascript" scheme="http://yoursite.com/categories/javascript/"/>
    
    
      <category term="闭包" scheme="http://yoursite.com/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>重读js高程笔记二</title>
    <link href="http://yoursite.com/2016/01/26/%E9%87%8D%E8%AF%BBjs%E9%AB%98%E7%A8%8B%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>http://yoursite.com/2016/01/26/重读js高程笔记二/</id>
    <published>2016-01-26T15:32:53.000Z</published>
    <updated>2016-01-26T15:36:18.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="重读js高程笔记二"><a href="#重读js高程笔记二" class="headerlink" title="重读js高程笔记二"></a>重读js高程笔记二</h2><blockquote>
<p>引用类型的值(对象)是引用类型的一个实例，在ES中引用类型是一种数据结构，将数据和功能组织在一起。引用类型有时候也被称之为<strong>对象定义</strong>，因为他们描述的是一类对象所具有的属性和方法。</p>
</blockquote>
<h2 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h2><h4 id="两种创建方式"><a href="#两种创建方式" class="headerlink" title="两种创建方式"></a>两种创建方式</h4><p>1 <code>new Object()</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">var person  = new Object();</div><div class="line">person.name = &quot;jing&quot;;</div><div class="line">person,age = 20;</div></pre></td></tr></table></figure></p>
<p>2 对象字面量<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var person = &#123;</div><div class="line">    name:&quot;jing&quot;,</div><div class="line">    age:20</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<blockquote>
<p>属性的访问两种方式，1-person.name,<code>2-person[&#39;name&#39;]</code>,后一种方式的好处可以用来在代码中拼接属性名。</p>
</blockquote>
<h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><h4 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 使用new Array() 构造函数</div><div class="line">var arr1 = new Array();</div><div class="line">var arr2 = new Array(20); // 长度为20</div><div class="line">var arr3 = new Array(&quot;red&quot;,&quot;blue&quot;,&quot;yellow&quot;);</div><div class="line">// 数组字面量表示法</div><div class="line">var arr4 = [&quot;red&quot;,&quot;blue&quot;,&quot;yellow&quot;];</div></pre></td></tr></table></figure>
<h4 id="检测数组方法"><a href="#检测数组方法" class="headerlink" title="检测数组方法"></a>检测数组方法</h4><ul>
<li><code>arr instanceof Array</code>,页面多个框架引起的多个全局执行环境问题。怎么理解呢(?)</li>
<li>ES5引入的<code>Array.isArray(arr)</code>解决上面的问题<h4 id="Array的常用方法"><a href="#Array的常用方法" class="headerlink" title="Array的常用方法"></a>Array的常用方法</h4></li>
</ul>
<ol>
<li>转换方法(所有对象都具有)，<code>toString()/toLocalString()/ValueOf()</code></li>
<li>栈方法，<code>push()</code></li>
<li>队列方法，<code>shift()</code> <code>unshift()-添加元素</code> </li>
<li>重排序，<code>reverse()</code>和<code>sort()</code> (?)</li>
<li>操作方法，<code>concat()</code> <code>slice()</code>和<strong>splice()-删除/插入/替换</strong></li>
<li>位置方法，<code>indexOf()</code> <code>lastIndexOf()</code></li>
<li>迭代方法，<code>every()/filter()/forEach()/map()/some()</code></li>
</ol>
<a id="more"></a>
<h2 id="Date"><a href="#Date" class="headerlink" title="Date"></a>Date</h2><h4 id="创建方法"><a href="#创建方法" class="headerlink" title="创建方法"></a>创建方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">var date1 = new Date(args);</div></pre></td></tr></table></figure>
<h4 id="常见使用方法"><a href="#常见使用方法" class="headerlink" title="常见使用方法"></a>常见使用方法</h4><ol>
<li>转换方法，<code>toString()/toLocalString()/ValueOf()</code></li>
<li>日期格式化方法，<code>toDateString()</code> <code>toTimeString()</code> <code>toLocalDateString()</code> <code>toLocalTimeString()</code> <code>toUTCString()</code></li>
<li>日期时间组件方法，<code>getTime/Date/Year/Month()...</code> <code>setTime/Date/Year/Month()...</code> <strong>get</strong>和<strong>set</strong> 获取时间，设置时间</li>
</ol>
<h2 id="regExp"><a href="#regExp" class="headerlink" title="regExp"></a>regExp</h2><p>regExp是ES支持正则表达式的一个接口<br>正则表达式，用得好可以少写很多逻辑代码</p>
<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><ol>
<li>函数声明和函数表达式，解析器在加载数据时候，会对函数声明进行<strong>函数声明提升</strong></li>
<li>作为值得函数，函数可以作为参数传入到另一函数中的使用方法</li>
<li>内部属性和方法 <code>arguments</code>,<code>this</code>,<code>.length</code>,<code>.prototype</code> <code>apply()</code> <code>call()</code></li>
<li>没有重载</li>
</ol>
<h2 id="Boolean"><a href="#Boolean" class="headerlink" title="Boolean"></a>Boolean</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">      var falseObj = new Boolean(false); </div><div class="line">var falseValue = false;</div><div class="line"></div><div class="line">console.log(falseObj &amp;&amp; true); // true</div><div class="line">console.log(falseValue &amp;&amp; true); // false</div><div class="line"></div><div class="line">console.log(typeof falseObj); // Object</div><div class="line">console.log(typeof falseValue); // boolean</div><div class="line"></div><div class="line">console.log(falseObj instanceof Boolean); // true</div><div class="line">console.log(falseValue instanceof Boolean) // false</div></pre></td></tr></table></figure>
<ul>
<li>Boolean类型是与布尔值对应的引用类型</li>
<li>在布尔表达式中使用布尔对象</li>
</ul>
<h2 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h2><p>与数字对应的引用类型，几个好用的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var num = 10;</div><div class="line">console.log(num.toString(2));</div><div class="line">console.log(num.toString(8)); // 加入参数转 显示其他进制</div><div class="line"></div><div class="line">console.log(num.toFixed(2)); // 保留几位小数</div></pre></td></tr></table></figure></p>
<h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>String是字符串的对象包装类型<br>一些常用的方法如下</p>
<ul>
<li><code>charAt()/charCodeAt()</code> 找到第几位字符</li>
<li><code>slice()/substr()/substring()</code> 截取 字符串，注意差别</li>
<li><code>indexOf()/lastIndexOf()</code> 找到位置</li>
<li><code>trim()</code>ES5引入的，创建一个字符串副本，删除前后的空格返回</li>
<li><code>toUpperCase()/toLowerCase()</code> 大小写转换</li>
<li>模式匹配本质上是调用了<code>RegExp</code>的<code>exec()</code>，有<code>match()/search()/replace()/split()</code></li>
<li><code>localeCompare()</code> 比较两个字符串</li>
<li><code>str.fromCodeAt(104,101,108,108,101) //hello</code> 传入多个字符编码转换成一个字符串</li>
</ul>
<h2 id="单体内置对象"><a href="#单体内置对象" class="headerlink" title="单体内置对象"></a>单体内置对象</h2><p>Global对象</p>
<ul>
<li><code>enCodeURI()/enCodeURIComponent()</code>  URI编码方法</li>
<li><code>eval()</code> 强大到直接执行语句</li>
<li><code>window</code>对象</li>
</ul>
<h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><ul>
<li><code>min()/max()</code></li>
<li><code>ceil()/floor()/round()</code> 向上向下标准舍入</li>
<li><code>random()</code> 返回介于0和1之间的随机数</li>
<li>其他<code>abs/sqrt/...</code></li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><p>清楚js引用类型，和相关用法</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;重读js高程笔记二&quot;&gt;&lt;a href=&quot;#重读js高程笔记二&quot; class=&quot;headerlink&quot; title=&quot;重读js高程笔记二&quot;&gt;&lt;/a&gt;重读js高程笔记二&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;引用类型的值(对象)是引用类型的一个实例，在ES中引用类型是一种数据结构，将数据和功能组织在一起。引用类型有时候也被称之为&lt;strong&gt;对象定义&lt;/strong&gt;，因为他们描述的是一类对象所具有的属性和方法。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Object类型&quot;&gt;&lt;a href=&quot;#Object类型&quot; class=&quot;headerlink&quot; title=&quot;Object类型&quot;&gt;&lt;/a&gt;Object类型&lt;/h2&gt;&lt;h4 id=&quot;两种创建方式&quot;&gt;&lt;a href=&quot;#两种创建方式&quot; class=&quot;headerlink&quot; title=&quot;两种创建方式&quot;&gt;&lt;/a&gt;两种创建方式&lt;/h4&gt;&lt;p&gt;1 &lt;code&gt;new Object()&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var person  = new Object();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person.name = &amp;quot;jing&amp;quot;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;person,age = 20;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;2 对象字面量&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;var person = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    name:&amp;quot;jing&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    age:20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;属性的访问两种方式，1-person.name,&lt;code&gt;2-person[&amp;#39;name&amp;#39;]&lt;/code&gt;,后一种方式的好处可以用来在代码中拼接属性名。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Array&quot;&gt;&lt;a href=&quot;#Array&quot; class=&quot;headerlink&quot; title=&quot;Array&quot;&gt;&lt;/a&gt;Array&lt;/h2&gt;&lt;h4 id=&quot;创建方式&quot;&gt;&lt;a href=&quot;#创建方式&quot; class=&quot;headerlink&quot; title=&quot;创建方式&quot;&gt;&lt;/a&gt;创建方式&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;// 使用new Array() 构造函数&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var arr1 = new Array();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var arr2 = new Array(20); // 长度为20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var arr3 = new Array(&amp;quot;red&amp;quot;,&amp;quot;blue&amp;quot;,&amp;quot;yellow&amp;quot;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;// 数组字面量表示法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;var arr4 = [&amp;quot;red&amp;quot;,&amp;quot;blue&amp;quot;,&amp;quot;yellow&amp;quot;];&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;检测数组方法&quot;&gt;&lt;a href=&quot;#检测数组方法&quot; class=&quot;headerlink&quot; title=&quot;检测数组方法&quot;&gt;&lt;/a&gt;检测数组方法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;arr instanceof Array&lt;/code&gt;,页面多个框架引起的多个全局执行环境问题。怎么理解呢(?)&lt;/li&gt;
&lt;li&gt;ES5引入的&lt;code&gt;Array.isArray(arr)&lt;/code&gt;解决上面的问题&lt;h4 id=&quot;Array的常用方法&quot;&gt;&lt;a href=&quot;#Array的常用方法&quot; class=&quot;headerlink&quot; title=&quot;Array的常用方法&quot;&gt;&lt;/a&gt;Array的常用方法&lt;/h4&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ol&gt;
&lt;li&gt;转换方法(所有对象都具有)，&lt;code&gt;toString()/toLocalString()/ValueOf()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;栈方法，&lt;code&gt;push()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;队列方法，&lt;code&gt;shift()&lt;/code&gt; &lt;code&gt;unshift()-添加元素&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;重排序，&lt;code&gt;reverse()&lt;/code&gt;和&lt;code&gt;sort()&lt;/code&gt; (?)&lt;/li&gt;
&lt;li&gt;操作方法，&lt;code&gt;concat()&lt;/code&gt; &lt;code&gt;slice()&lt;/code&gt;和&lt;strong&gt;splice()-删除/插入/替换&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;位置方法，&lt;code&gt;indexOf()&lt;/code&gt; &lt;code&gt;lastIndexOf()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;迭代方法，&lt;code&gt;every()/filter()/forEach()/map()/some()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>重读js高程笔记一</title>
    <link href="http://yoursite.com/2016/01/15/%E9%87%8D%E8%AF%BBjs%E9%AB%98%E7%A8%8B%E7%AC%94%E8%AE%B0%E4%B8%80/"/>
    <id>http://yoursite.com/2016/01/15/重读js高程笔记一/</id>
    <published>2016-01-14T16:13:44.000Z</published>
    <updated>2016-01-14T16:28:05.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://img3.douban.com/lpic/s8958650.jpg" alt=""></p>
<h4 id="00-javascript组成"><a href="#00-javascript组成" class="headerlink" title="00 javascript组成"></a>00 javascript组成</h4><ul>
<li>ECMAScript(-265)核心语言部分</li>
<li>DOM文档对象模型（DOM1、2、3）</li>
<li>BOM浏览器对象模型(提供与浏览器交互的接口和方法)</li>
</ul>
<h4 id="01-script标签"><a href="#01-script标签" class="headerlink" title="01 script标签"></a>01 script标签</h4><ul>
<li>async 异步加载 执行顺序不定</li>
<li>charset</li>
<li>defer 延迟加载，立即下载脚本但不执行</li>
<li>src</li>
<li>type 默认text/javascript</li>
</ul>
<h4 id="02-doctype"><a href="#02-doctype" class="headerlink" title="02 doctype"></a>02 doctype</h4><ul>
<li>混杂模式quirks mode和标准模式standards mode</li>
<li>为什么会有这两种模式？</li>
<li>两种模式的差异？</li>
</ul>
<h4 id="03-ES3基础-ES5"><a href="#03-ES3基础-ES5" class="headerlink" title="03 ES3基础(ES5)"></a>03 ES3基础(ES5)</h4><ul>
<li>区分大小写的</li>
<li>标识符：首字母以字母、下划线(_)或者$开头</li>
<li>注释的写法</li>
<li><strong>ES5引入的 use strict 严格模式</strong></li>
<li>变量（var）局部变量和全局变量</li>
<li>数据类型(五个基本数据类型+Object)<br><code>Undefined Null Boolean String Number+Object</code>及判定方法<code>typeof instanceof</code>   </li>
</ul>
<h4 id="04-Number"><a href="#04-Number" class="headerlink" title="04 Number"></a>04 Number</h4><ul>
<li>可以直接进行八进制 十六进制的计算 a=077 b=0x7F</li>
<li>浮点数的摄入问题不能直接0.1+0.2==0.3这样的判断</li>
<li>NaN()</li>
<li>数值转换 Number,parseInt(num,基数)，parseFloat</li>
</ul>
<h4 id="05-相等和全等"><a href="#05-相等和全等" class="headerlink" title="05 相等和全等"></a>05 相等和全等</h4><p><code>==</code>和<code>===</code><br><code>!=</code>和<code>!==</code><br>相等会进行数据类型转换到一样的类型再进行比较，全等则不转换在数据类型一样的情况下比较。</p>
<p>Q1:为什么0.1+0.2 == 0.3 false?怎么处理？<br><a href="https://www.zhihu.com/question/24415787" target="_blank" rel="external">知乎-JS计算0.1+0.2≠0.3，求解法？</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://img3.douban.com/lpic/s8958650.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h4 id=&quot;00-javascript组成&quot;&gt;&lt;a href=&quot;#00-javascript组成&quot; class=&quot;headerlink&quot; ti
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="javascript" scheme="http://yoursite.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>nodejs学习笔记#1</title>
    <link href="http://yoursite.com/2016/01/02/nodejs%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/"/>
    <id>http://yoursite.com/2016/01/02/nodejs学习笔记-1/</id>
    <published>2016-01-02T06:48:00.000Z</published>
    <updated>2016-01-02T06:53:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>学习地址<br><a href="http://study.163.com/course/courseMain.htm?courseId=601001" target="_blank" rel="external">网易云课堂-珠峰node.js学习课程</a></p>
<p>课程讲的挺基础的<br>1 nodejs的安装<br>2 常用的一些全局变量和方法如<strong>filename </strong>dirname等<br>3 模块和包的概念</p>
<p>nodejs的核心知识点就是应该去理解，模块和包的概念，阻塞与非阻塞<br>一个js文件，看成一个独立的模块，提高接口供另外的模块引用使用。<br>包，来管理多个模块。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;学习地址&lt;br&gt;&lt;a href=&quot;http://study.163.com/course/courseMain.htm?courseId=601001&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;网易云课堂-珠峰node.js学习课程&lt;/a&gt;&lt;/p&gt;
&lt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="nodejs" scheme="http://yoursite.com/tags/nodejs/"/>
    
  </entry>
  
</feed>
