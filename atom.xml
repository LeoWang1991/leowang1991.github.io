<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lifelover</title>
  
  <subtitle>love life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://lifelover.cc/"/>
  <updated>2019-04-13T15:10:36.750Z</updated>
  <id>https://lifelover.cc/</id>
  
  <author>
    <name>骁飞</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>正则表达式学习笔记</title>
    <link href="https://lifelover.cc/2019/04/13/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lifelover.cc/2019/04/13/正则表达式学习笔记/</id>
    <published>2019-04-13T05:34:04.000Z</published>
    <updated>2019-04-13T15:10:36.750Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写代码遇到个问题，就是<code>[&quot;admin&quot;]</code>提取其中的字符串<code>admin</code>因为不会写正则只能通过<code>replace(&#39;[&quot;&#39;,&#39;&#39;).replace(&#39;&quot;]&#39;,&#39;&#39;)</code>操作，感觉很笨拙，通过正则去应该是更好的方法。</p><p>本文主要了解</p><ol><li>什么是正则表达式</li><li>基本语法规则</li></ol><a id="more"></a><h2 id="正则表达式是什么"><a href="#正则表达式是什么" class="headerlink" title="正则表达式是什么"></a>正则表达式是什么</h2><p>个人理解就是匹配文本的规则吧，了解这个规则怎么去写对文本处理真的太有帮助了。</p><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h3 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h3><p>元字符是一些特定辅助精准匹配的特定字符</p><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以为的任何字符</td></tr><tr><td>\w</td><td>匹配字母 数字 下划线 汉字</td></tr><tr><td>\s</td><td>匹配任意空白符</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\b</td><td>匹配单词的开始或结束</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table><p>对于特殊字符需要通过<code>\</code>来转义，比如匹配<code>.</code>那么需要使用<code>\.</code></p><h3 id="重复"><a href="#重复" class="headerlink" title="重复"></a>重复</h3><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复0次或更多次</td></tr><tr><td>+</td><td>重复1次或更多次</td></tr><tr><td>？</td><td>重复0次或1次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><h3 id="设置匹配字符集"><a href="#设置匹配字符集" class="headerlink" title="设置匹配字符集"></a>设置匹配字符集</h3><p>通过<code>[]</code>来设定匹配字符集 如<code>[0-9]</code>就相当于<code>\d</code></p><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>对单个字符来说，通过<code>0{n}</code>来设置匹配次数，但是对于字符串而言的话，通过分组来解决<code>(\d{1,3}\.){3}\d{1,3}</code>匹配ip。</p><h3 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h3><table><thead><tr><th>代码/语法</th><th>说明</th></tr></thead><tbody><tr><td>\W</td><td>匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\B</td><td>匹配不是单词开头或结束的位置</td></tr><tr><td>[^x]</td><td>匹配除了x以外的任意字符</td></tr><tr><td>[^aeiou]</td><td>匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table><p>以上差不多就能日常使用了</p><h3 id="其他高级用法参考"><a href="#其他高级用法参考" class="headerlink" title="其他高级用法参考"></a>其他高级用法参考</h3><p><a href="https://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式30分钟入门教程</a></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>回到上面之前的问题 从<code>[&quot;admin&quot;]</code>中提取<code>admin</code>就可以写</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'["amdin"]'</span>.replace(<span class="regexp">/\[\"|\"\]/g</span>,<span class="string">''</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前写代码遇到个问题，就是&lt;code&gt;[&amp;quot;admin&amp;quot;]&lt;/code&gt;提取其中的字符串&lt;code&gt;admin&lt;/code&gt;因为不会写正则只能通过&lt;code&gt;replace(&amp;#39;[&amp;quot;&amp;#39;,&amp;#39;&amp;#39;).replace(&amp;#39;&amp;quot;]&amp;#39;,&amp;#39;&amp;#39;)&lt;/code&gt;操作，感觉很笨拙，通过正则去应该是更好的方法。&lt;/p&gt;
&lt;p&gt;本文主要了解&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;什么是正则表达式&lt;/li&gt;
&lt;li&gt;基本语法规则&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lifelover.cc/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="正则表达式" scheme="https://lifelover.cc/tags/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>react ssr学习</title>
    <link href="https://lifelover.cc/2019/04/04/react-ssr%E5%AD%A6%E4%B9%A0/"/>
    <id>https://lifelover.cc/2019/04/04/react-ssr学习/</id>
    <published>2019-04-04T07:43:28.000Z</published>
    <updated>2019-04-04T09:24:33.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>了解ssr</p><h2 id="带着问题"><a href="#带着问题" class="headerlink" title="带着问题"></a>带着问题</h2><ol><li>SSR是什么东西</li><li>同构有是什么</li><li>SSR使用场景，解决什么问题</li><li>那么怎么使用ssr</li><li>有没有现成的优秀的轮子直接用</li><li>看看轮子</li></ol><h2 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h2><p><a href="https://juejin.im/post/5bc7ea48e51d450e46289eab" target="_blank" rel="noopener">React中同构原理(SSR)脉络梳理</a></p><p><a href="https://juejin.im/entry/5a111eb7f265da431c6fe51c" target="_blank" rel="noopener">服务端渲染vs 客户端渲染</a></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="SSR是什么"><a href="#SSR是什么" class="headerlink" title="SSR是什么"></a>SSR是什么</h3><p><code>server-side rendering</code>，字面意思就是服务端渲染，相对客户端渲染<code>csr(client-side-rending)</code>。</p><p>具体点说呢？</p><ol><li>客户端渲染的话，浏览器加载页面，服务端返回html文件但是没有内容展示，然后去加载执行html文件中的js去请求数据填充数据完成页面的交互事件绑定。</li><li>服务端渲染的话，返回html文件之前就把所有的数据填充好然后返回，浏览器只负责解析html就行了。</li></ol><p>最后都是一样，有数据地展示页面。</p><h3 id="SSR使用场景"><a href="#SSR使用场景" class="headerlink" title="SSR使用场景"></a>SSR使用场景</h3><ol><li>seo，爬虫看不到完整源码</li><li>首屏加载慢，这个有体会。在 CSR 的页面渲染流程中，首先要加载 HTML 文件，之后要下载页面所需的 JavaScript 文件，然后 JavaScript 文件渲染生成页面。在这个渲染过程中至少涉及到两个 HTTP 请求周期，所以会有一定的耗时，这也是为什么大家在低网速下访问普通的 React 或者 Vue 应用时，初始页面会有出现白屏的原因。</li></ol><p>缺点，第一篇参考文中有指出，本来简单的步骤因为ssr变得繁琐，项目可维护性差。</p><h3 id="同构"><a href="#同构" class="headerlink" title="同构"></a>同构</h3><p>同构：同构这个概念存在于 Vue，React 这些新型的前端框架中，同构实际上是客户端渲染和服务器端渲染的一个整合。我们把页面的展示内容和交互写在一起，让代码执行两次。在服务器端执行一次，用于实现服务器端渲染，在客户端再执行一次，用于接管页面交互。</p><h3 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h3><p>vitual-dom的存在</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;了解ssr&lt;/p&gt;
&lt;h2 id=&quot;带着问题&quot;&gt;&lt;a href=&quot;#带着问题&quot; class=&quot;headerlink&quot; title=&quot;带着问题
      
    
    </summary>
    
      <category term="前端" scheme="https://lifelover.cc/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="react" scheme="https://lifelover.cc/tags/react/"/>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lifelover.cc/2019/04/04/npm%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0/"/>
    <id>https://lifelover.cc/2019/04/04/npm指令学习/</id>
    <published>2019-04-04T06:50:35.087Z</published>
    <updated>2019-04-04T07:41:26.481Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>npm操作指令笔记</p><h2 id="查看"><a href="#查看" class="headerlink" title="查看"></a>查看</h2><p>1 查看已经安装的包文件 版本号</p><p>查看所有 <code>npm list -g --depth=0</code>(depth=0去掉其他依赖项)</p><p>查看特定<code>npm view xxx version -g</code></p><p>查看过期的 <code>npm outdated -g --depth=0</code></p><p>2 查看全局包安装路径</p><p><code>npm config get prefix</code>,设置的话则</p><p><code>npm config set prefix &#39;&#39;</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;npm操作指令笔记&lt;/p&gt;
&lt;h2 id=&quot;查看&quot;&gt;&lt;a href=&quot;#查看&quot; class=&quot;headerlink&quot; title=&quot;查看&quot;&gt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title></title>
    <link href="https://lifelover.cc/2019/03/27/%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%98%E8%85%BE%E5%B0%8F%E8%AE%B0/"/>
    <id>https://lifelover.cc/2019/03/27/腾讯云服务器折腾小记/</id>
    <published>2019-03-27T13:38:07.028Z</published>
    <updated>2019-03-28T07:15:18.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>我差不多都忘了，我还有台腾讯云服务器，到2023年到期。我寻思着也不能这么浪费吧。所以花时间折腾下，做些记录咯。</p><h2 id="命令行指南"><a href="#命令行指南" class="headerlink" title="命令行指南"></a>命令行指南</h2><ol><li>yum:  yellow dog updater</li></ol><h2 id="安装各种东西"><a href="#安装各种东西" class="headerlink" title="安装各种东西"></a>安装各种东西</h2><h3 id="zsh-ys主题"><a href="#zsh-ys主题" class="headerlink" title="zsh(ys主题)"></a>zsh(ys主题)</h3><p><a href="https://www.jianshu.com/p/556ff130fc65" target="_blank" rel="noopener">https://www.jianshu.com/p/556ff130fc65</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;我差不多都忘了，我还有台腾讯云服务器，到2023年到期。我寻思着也不能这么浪费吧。所以花时间折腾下，做些记录咯。&lt;/p&gt;
&lt;h2 id=&quot;命
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>git操作指南</title>
    <link href="https://lifelover.cc/2019/03/26/git%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"/>
    <id>https://lifelover.cc/2019/03/26/git操作指南/</id>
    <published>2019-03-26T12:36:45.000Z</published>
    <updated>2019-03-26T08:08:46.577Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>了解掌握基础的git操作</li><li>备忘录</li></ol><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h3 id="新建本地分支-推送到远程仓库"><a href="#新建本地分支-推送到远程仓库" class="headerlink" title="新建本地分支 推送到远程仓库"></a>新建本地分支 推送到远程仓库</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feature-branch    <span class="comment">//创建并切换到分支feature-branch  </span></span><br><span class="line">$  git push origin feature-branch:feature-branch    <span class="comment">//推送本地的feature-branch(冒号前面的)分支到远程origin的feature-branch(冒号后面的)分支(没有会自动创建)</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;了解掌握基础的git操作&lt;/li&gt;
&lt;li&gt;备忘录&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;操作&quot;&gt;&lt;a href=&quot;#操作&quot; c
      
    
    </summary>
    
      <category term="工具" scheme="https://lifelover.cc/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="git" scheme="https://lifelover.cc/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>前端Nginx配置</title>
    <link href="https://lifelover.cc/2019/03/25/%E5%89%8D%E7%AB%AFnginx%E9%85%8D%E7%BD%AE/"/>
    <id>https://lifelover.cc/2019/03/25/前端nginx配置/</id>
    <published>2019-03-25T13:36:45.000Z</published>
    <updated>2019-03-26T08:19:41.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>了解学习在服务器上安装并启动Nginx</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.runoob.com/linux/nginx-install-setup.html" target="_blank" rel="noopener">菜鸟教程 nginx安装配置</a></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><ol><li>查看系统信息 指令</li><li></li></ol><h2 id="安装Nginx"><a href="#安装Nginx" class="headerlink" title="安装Nginx"></a>安装Nginx</h2><h3 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h3><p><img src="https://ws4.sinaimg.cn/large/006tKfTcgy1g1g6z0nhx8j30ua0dswkb.jpg" alt=""></p><p>需要升级openssl</p><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 查找服务</span></span><br><span class="line">ps -ef | grep nginx</span><br><span class="line"><span class="comment">// 启动</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;了解学习在服务器上安装并启动Nginx&lt;/p&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlin
      
    
    </summary>
    
      <category term="后端" scheme="https://lifelover.cc/categories/%E5%90%8E%E7%AB%AF/"/>
    
    
      <category term="nginx" scheme="https://lifelover.cc/tags/nginx/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript事件机制</title>
    <link href="https://lifelover.cc/2019/03/21/JavaScript%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6/"/>
    <id>https://lifelover.cc/2019/03/21/JavaScript事件机制/</id>
    <published>2019-03-21T02:36:45.000Z</published>
    <updated>2019-03-21T02:57:57.787Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>了解学习 JavaScript事件机制 Event Loop</li><li>单线程怎么做到 非阻塞</li></ol><a id="more"></a><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="http://www.ruanyifeng.com/blog/2013/10/event_loop.html" target="_blank" rel="noopener">什么是Event Loop</a></p><p><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">JavaScript 运行机制详解：再谈Event Loop</a></p><p><a href="https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/?utm_source=html5weekly" target="_blank" rel="noopener">Tasks, microtasks, queues and schedules</a></p><p><a href="https://juejin.im/post/59e85eebf265da430d571f89" target="_blank" rel="noopener">这一次彻底弄懂JavaScript执行机制</a></p><p><a href="https://juejin.im/post/5b498d245188251b193d4059" target="_blank" rel="noopener">JS事件循环机制（event loop）之宏任务/微任务</a></p><p><a href="https://github.com/dwqs/blog/issues/61" target="_blank" rel="noopener">从一道题说JavaScript的事件循环</a></p><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ol><li>JavaScript是单线程语言</li><li>Event Loop是JavaScript执行机制</li></ol><blockquote><p>执行顺序，js一般的执行顺序都是按正常顺序执行，如果触发了事件比如点击事件或者其他页面上的交互事件，会将事件放到执行栈Stack，然后顺序执行，这就有个问题，比如加载图片很慢会使得页面渲染很慢，所以需要引出<code>异步</code>的概念，对于异步的任务，</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;了解学习 JavaScript事件机制 Event Loop&lt;/li&gt;
&lt;li&gt;单线程怎么做到 非阻塞&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lifelover.cc/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://lifelover.cc/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Promise</title>
    <link href="https://lifelover.cc/2019/03/21/Promise/"/>
    <id>https://lifelover.cc/2019/03/21/Promise/</id>
    <published>2019-03-21T02:36:45.000Z</published>
    <updated>2019-04-04T06:27:48.123Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ol><li>Promise概念</li><li>解决什么问题</li><li>用法</li></ol><h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><ol><li>在 <a href="http://effectivejs.com/" target="_blank" rel="noopener">Effective JavaScript</a> 的 <strong>第67项 不要对异步回调函数进行同步调用</strong></li><li></li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noopener">MDN-Promise</a></p><p><a href="http://liubin.org/promises-book/" target="_blank" rel="noopener">Promise小书</a></p><a id="more"></a><h2 id="Promise是什么"><a href="#Promise是什么" class="headerlink" title="Promise是什么"></a>Promise是什么</h2><p>Promise是一个对象，是个什么对象？用来表示一个异步操作的最终状态(完成或者失败)，以及该异步操作的结果值。</p><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ol><li>Promise() 三种状态 pending FulFilled Rejected时候，对应的处理方法.then .catch</li><li>链式调用</li><li>Promise().then() 或者.catch() 都会返回一个新的Promise()</li><li>用Promise.all() .race() 对多个异步调用进行统一处理</li><li>all和race的差别，all是等所有Promise状态确定后(fulfilled或者rejected)才进行后面的处理，race是当某一个Promise状态确定后就会进行后面的处理</li><li>使用reject而不是throw来使得Promise状态变为rejected</li></ol><h2 id="then和catch"><a href="#then和catch" class="headerlink" title="then和catch"></a>then和catch</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;Promise概念&lt;/li&gt;
&lt;li&gt;解决什么问题&lt;/li&gt;
&lt;li&gt;用法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;疑惑&quot;&gt;&lt;a href=&quot;#疑惑&quot; class=&quot;headerlink&quot; title=&quot;疑惑&quot;&gt;&lt;/a&gt;疑惑&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在 &lt;a href=&quot;http://effectivejs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Effective JavaScript&lt;/a&gt; 的 &lt;strong&gt;第67项 不要对异步回调函数进行同步调用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;参考资料&quot;&gt;&lt;a href=&quot;#参考资料&quot; class=&quot;headerlink&quot; title=&quot;参考资料&quot;&gt;&lt;/a&gt;参考资料&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MDN-Promise&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://liubin.org/promises-book/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Promise小书&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lifelover.cc/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="es6" scheme="https://lifelover.cc/tags/es6/"/>
    
  </entry>
  
  <entry>
    <title>HTTP请求</title>
    <link href="https://lifelover.cc/2019/03/21/HTTP%E8%AF%B7%E6%B1%82/"/>
    <id>https://lifelover.cc/2019/03/21/HTTP请求/</id>
    <published>2019-03-21T02:36:45.000Z</published>
    <updated>2019-03-21T02:57:54.013Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过接口看http请求</p><a id="more"></a><h2 id="login接口"><a href="#login接口" class="headerlink" title="login接口"></a>login接口</h2><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g182ukfq2lj30ix0lu78q.jpg" alt=""></p><h3 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h3><ol><li>需要弄清楚http请求报头包括哪些内容</li><li>使用场景</li><li>CORS 安全性问题等</li></ol><h3 id="字段讲解"><a href="#字段讲解" class="headerlink" title="字段讲解"></a>字段讲解</h3><h4 id="General"><a href="#General" class="headerlink" title="General"></a>General</h4><ol><li><code>Request URL</code>:请求接口url地址</li><li><code>Request Method</code>:请求方法 post get put delete…</li><li><code>Status Code</code>：状态码</li><li><code>Remote Address</code>:远程服务器ip</li><li><code>Referrer Policy</code>: 来源协议，<strong>需要了解</strong>，监管哪些访问来源信息</li></ol><h4 id="Response-Headers"><a href="#Response-Headers" class="headerlink" title="Response Headers"></a>Response Headers</h4><ol start="6"><li><code>Access-Control-Allow-Credentials</code>:响应头表示是否可以将对请求的响应暴露给页面，true则可以，其他都不行。</li><li><code>Access-Control-Allow-Origin</code>:访问控制允许同源，涉及到安全性CORS</li><li><code>Cache-Control</code>:缓存控制</li><li><code>Content-Type</code>:返回数据类型</li><li><code>Date</code>:服务器时间</li><li><code>Expires</code>:响应过期的时间，0代表无效</li><li><code>Pragma</code>: 兼容只支持HTTP/1.0协议的缓存服务器相当于Cache-Control作用</li><li><code>Transfer-Encoding</code>:传递给用户采用的编码方式</li><li><code>Vary</code>:一个HTTP响应头部信息，它决定了对于未来的一个请求头</li><li><code>X-Content-Type-Options</code>:响应首部相当于一个提示标志，被服务器用来提示客户端一定要遵循在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Type" target="_blank" rel="noopener"><code>Content-Type</code></a> 首部中对  <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener">MIME 类型</a> 的设定，而不能对其进行修改。</li><li><code>X-Frame-Options</code>:是否允许当前页面通过iframe内嵌到其他网站中</li><li><code>X-XSS-Protection</code>:响应头是Internet Explorer，Chrome和Safari的一个功能，当检测到跨站脚本攻击 (<a href="https://developer.mozilla.org/en-US/docs/Glossary/XSS" target="_blank" rel="noopener">XSS</a>)时，浏览器将停止加载页面。</li></ol><h4 id="Request-Headers"><a href="#Request-Headers" class="headerlink" title="Request Headers"></a>Request Headers</h4><ol start="18"><li><code>Accept</code>: 发送端希望接受的数据类型</li><li><code>Content-Type</code>:发送端发送的实体数据的类型</li><li><code>Origin</code>:请求来自哪个站点</li><li><code>Referer</code>:首部包含了当前请求页面的来源页面的地址，即表示当前页面是通过此来源页面里的链接进入的。</li><li><code>User-Agent</code>:发起请求的用户代理软件信息</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;通过接口看http请求&lt;/p&gt;
    
    </summary>
    
      <category term="网络" scheme="https://lifelover.cc/categories/%E7%BD%91%E7%BB%9C/"/>
    
    
      <category term="http" scheme="https://lifelover.cc/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>从零开始搭建React</title>
    <link href="https://lifelover.cc/2019/03/18/%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAReact/"/>
    <id>https://lifelover.cc/2019/03/18/从零搭建React/</id>
    <published>2019-03-18T02:36:45.000Z</published>
    <updated>2019-03-21T02:57:24.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>不借助脚手架 create-react-app，自己手工从零开始搭建React App</p><ol><li>npm 使用</li><li>webpack配置</li><li>其他</li></ol><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><ol><li>安装babel的 还是babel-cli 以及怎么配置的</li><li>babel配置的问题 <a href="https://stackoverflow.com/questions/53326986/trace-the-node-type-spreadproperty-has-been-renamed-to-spreadelement-at-object" target="_blank" rel="noopener">https://stackoverflow.com/questions/53326986/trace-the-node-type-spreadproperty-has-been-renamed-to-spreadelement-at-object</a></li><li><a href="https://github.com/babel/babel/issues/8707" target="_blank" rel="noopener">https://github.com/babel/babel/issues/8707</a></li></ol><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><ol><li>webpack配置 loader plugins</li><li>babel配置 两种方式 package.json/.babelrc</li><li>webpack打包过程中</li><li>webpack-dev-server </li></ol><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>npm init</li><li>安装react 和react-dom</li><li>安装打包工具 webpack和webpack-dev-server</li><li>安装babel，转es6到es5(？)</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;不借助脚手架 create-react-app，自己手工从零开始搭建React App&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;npm 使用&lt;/li&gt;
&lt;li&gt;webpack配置&lt;/li&gt;
&lt;li&gt;其他&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lifelover.cc/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="React" scheme="https://lifelover.cc/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>前端工具</title>
    <link href="https://lifelover.cc/2019/03/17/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    <id>https://lifelover.cc/2019/03/17/前端工具/</id>
    <published>2019-03-17T02:36:45.000Z</published>
    <updated>2019-04-12T03:23:58.712Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前端工具使用</p><a id="more"></a><h2 id="live-server"><a href="#live-server" class="headerlink" title="live-server"></a><a href="https://www.npmjs.com/package/live-server" target="_blank" rel="noopener">live-server</a></h2><p>起个个本地服务，可以实现热更新</p><blockquote><p>注意：–watch监视当前文件夹路径要写<strong>“.”</strong>，而不是<strong>“./“</strong>，</p><p>not work: live-server ./ –port=9000 –watch=./</p><p>work: live-server . –port=9000 –watch=.</p></blockquote><p><img src="https://tmp-1256179672.cos.ap-shanghai.myqcloud.com/%E4%BA%A4%E6%98%93%E6%80%BB%E6%95%B0.png?q-sign-algorithm=sha1&amp;q-ak=AKIDKejRcCpvP4suKmCmUwMQayndEN9mgtGK&amp;q-sign-time=1555039399;1555041199&amp;q-key-time=1555039399;1555041199&amp;q-header-list=&amp;q-url-param-list=&amp;q-signature=1bd52e5376918861eb106031186e2e85b0f9341e&amp;x-cos-security-token=239abce591da55cb25d7a4284150aaf1b5eda0aa10001" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前端工具使用&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lifelover.cc/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="工具" scheme="https://lifelover.cc/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>学习英语</title>
    <link href="https://lifelover.cc/2019/03/15/%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD/"/>
    <id>https://lifelover.cc/2019/03/15/学习英语/</id>
    <published>2019-03-15T12:36:45.000Z</published>
    <updated>2019-03-21T02:57:36.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>学习英语哇</p><ol><li>为什么好好掌握英语</li><li>怎么学习</li></ol><a id="more"></a><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://byoungd.gitbook.io/english-level-up-tips/part-i/1-understanding" target="_blank" rel="noopener">程序员学习英语</a></p><h2 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h2><ol><li>去找一些单词书 不要总是去app上背四六级单词</li><li>通过有道单词本 同步遇到的生词等 自己的词库</li><li>英语阅读参考手册</li></ol><h2 id="单词"><a href="#单词" class="headerlink" title="单词"></a>单词</h2><p><img src="https://ws3.sinaimg.cn/large/006tKfTcly1g19ac8oezxj31bk0u00x2.jpg" alt=""></p><p>背单词的方法：</p><ol><li>每天适量坚持，比如每天80-100，因为比较容易，记得住，但是这种效果不是特别好，因为记得少</li><li>通过背诵大量的单词并快速复习，遗忘率虽然相对于定量背诵高，但是可以以量取胜。 比如:一天背20个词，一个月能背600个，假设形成长期记忆的占80%，那最后能记住的便是480个。 但是如果我用相同时间，每天快速看100个词，一个月能看3000个。假设能记住30%，最后能记住900个，远远大于第一种方式。 适用于在1000~7000词汇量这个学习阶段。</li></ol><p>通过自己的单词本学习，而不是通过app上去背六级四级等单词本，很多时候会浪费时间，自己的单词本，遇到生词，比如阅读文档时候遇到，添加进去，然后复习。这样容易积累。</p><blockquote><p>tips: 背单词的时候大多数时候不需要刻意的去记，简单的过一下就行，生词，<strong>生</strong> 词嘛，多过过，自然而然就熟悉了;</p><p>另外最好不要在公交 状态不好时候去背，效果并不佳，很多时候这种背诵只是走个过程，打个卡。专门留点时间去背。</p></blockquote><h2 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h2><h3 id="选择听力材料"><a href="#选择听力材料" class="headerlink" title="选择听力材料"></a>选择听力材料</h3><ol><li>油管 适当订阅喜欢的内容，不要杂</li><li>刷喜欢的剧，重复刷的时候尝试关掉字幕</li><li>有意识地去听英文歌词</li><li>直播 听播</li><li><a href="https://byoungd.gitbook.io/english-level-up-tips/part-i/3-listening" target="_blank" rel="noopener">油管的频道推荐</a></li></ol><blockquote><p>tips: 选择的材料 比如说剧 音乐等 去选择自己喜欢的内容，这样才能坚持下去</p></blockquote><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p><a href="https://book.douban.com/subject/4720475/" target="_blank" rel="noopener">英语阅读参考手册</a></p><p>材料很多，从简单的文章，小说开始，逐步提高。</p><p>社区Medium Quora Reddit Twitter等。</p><h2 id="口语"><a href="#口语" class="headerlink" title="口语"></a>口语</h2><p>之前尝试的学习方法就是通过类似<code>英语流利说</code>这样的app来训练，挺枯燥的。</p><ol><li>读出来，比如读短文 读小说</li><li>唱喜欢的英语歌</li><li>如果能通过网络认识墙外的哥们 那就可以直接沟通了 这算一条路子</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;学习英语哇&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;为什么好好掌握英语&lt;/li&gt;
&lt;li&gt;怎么学习&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="学习" scheme="https://lifelover.cc/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="英语" scheme="https://lifelover.cc/tags/%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>js高程学习笔记</title>
    <link href="https://lifelover.cc/2019/03/11/js%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>https://lifelover.cc/2019/03/11/js高程学习笔记/</id>
    <published>2019-03-11T02:36:45.000Z</published>
    <updated>2019-04-03T06:04:19.152Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>重读js高程3的学习笔记，这本书很经典，值得多读几遍。特别是其中的js高级内容，需要很好地去掌握</p><ol><li>作用域</li><li>原型 原型链</li><li>闭包</li><li>对象和函数</li><li>…</li></ol><a id="more"></a><p><img src="https://ws1.sinaimg.cn/large/006tKfTcgy1g1per63c54j30u03r0kgu.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;重读js高程3的学习笔记，这本书很经典，值得多读几遍。特别是其中的js高级内容，需要很好地去掌握&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;作用域&lt;/li&gt;
&lt;li&gt;原型 原型链&lt;/li&gt;
&lt;li&gt;闭包&lt;/li&gt;
&lt;li&gt;对象和函数&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
      <category term="前端" scheme="https://lifelover.cc/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="JavaScript" scheme="https://lifelover.cc/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>README</title>
    <link href="https://lifelover.cc/2019/03/01/README/"/>
    <id>https://lifelover.cc/2019/03/01/README/</id>
    <published>2019-03-01T02:36:45.000Z</published>
    <updated>2019-03-21T02:49:36.649Z</updated>
    
    <content type="html"><![CDATA[<p>重新开始写blog了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;重新开始写blog了&lt;/p&gt;

      
    
    </summary>
    
      <category term="其他" scheme="https://lifelover.cc/categories/%E5%85%B6%E4%BB%96/"/>
    
    
  </entry>
  
</feed>
