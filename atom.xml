<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lifelover</title>
  <subtitle>love life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-03-22T06:37:15.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>jingxiao</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>碎片化时间</title>
    <link href="http://yoursite.com/2017/03/22/%E7%A2%8E%E7%89%87%E5%8C%96%E6%97%B6%E9%97%B4/"/>
    <id>http://yoursite.com/2017/03/22/碎片化时间/</id>
    <published>2017-03-22T02:22:11.000Z</published>
    <updated>2017-03-22T06:37:15.000Z</updated>
    
    <content type="html"><![CDATA[<p>时间越来越碎片化了</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时间越来越碎片化了&lt;/p&gt;

    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="时间" scheme="http://yoursite.com/tags/%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>webpack入门学习</title>
    <link href="http://yoursite.com/2017/01/04/webpack%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/01/04/webpack入门学习/</id>
    <published>2017-01-04T15:59:21.000Z</published>
    <updated>2017-01-04T15:59:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>1 webpack是一款很好用的构建工具<br><img src="https://webpack.github.io/assets/what-is-webpack.png" alt=""></p>
<p>2 相比其他构建工具，webpack的特点在于webpack能把任何类型的资源模块转换为.js代码块实现与其他模块的合并和加载。</p>
<p>3 webpack通过<a href="https://webpack.github.io/docs/loaders.html#introduction" target="_blank" rel="external">loader</a>来实现上述的转换。通过loader来实现转换其他资源到JavaScript代码。</p>
<p>4 webpack plugins插件，plugin的存在可以看做是实现那些loader实现不了或者不适合在loader中实现的功能。</p>
<p>5 webpack.config.js 配置</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">var path = require(&quot;path&quot;);</div><div class="line">// var HtmlWebpackPlugin = require(&quot;html-webpack-plugin&quot;); // 插件使用</div><div class="line">module.exports = &#123;</div><div class="line">    entry: path.join(__dirname, &quot;index&quot;),</div><div class="line">    output: &#123;</div><div class="line">        path: __dirname,</div><div class="line">        filename: &quot;bundle.js&quot;</div><div class="line">    &#125;,</div><div class="line">    module: &#123;</div><div class="line">        loaders: [&#123;</div><div class="line">            test: /\.css$/,</div><div class="line">            loaders: [&quot;style&quot;, &quot;css&quot;]</div><div class="line">        &#125;]</div><div class="line">    &#125;,</div><div class="line">    plugins: [</div><div class="line">        // new HtmlWebpackPlugin(&#123;</div><div class="line">        //     title: &quot;use plugin&quot;</div><div class="line">        // &#125;)</div><div class="line">    ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>6 其他，webpack-dev-server使用</p>
<p>参考：<br><a href="https://webpack.github.io" target="_blank" rel="external">webpack</a><br><a href="https://book.douban.com/subject/26901067/" target="_blank" rel="external">React全栈</a> </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1 webpack是一款很好用的构建工具&lt;br&gt;&lt;img src=&quot;https://webpack.github.io/assets/what-is-webpack.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;2 相比其他构建工具，webpack的特点在于webpack能把任何
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
      <category term="工具" scheme="http://yoursite.com/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>浏览器渲染原理学习</title>
    <link href="http://yoursite.com/2017/01/03/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93%E5%8E%9F%E7%90%86%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/01/03/浏览器渲染原理学习/</id>
    <published>2017-01-03T15:26:38.000Z</published>
    <updated>2017-01-03T15:28:36.000Z</updated>
    
    <content type="html"><![CDATA[<p>在讨论页面渲染性能的时候，经常会听到这几个词“重绘” “回流” “重排”。<br>回流和重排都是 <code>Reflow</code>的不同翻译(叫法)<br>重绘对应<code>Repaint</code>，重新绘制的意思。</p>
<p><strong>webkit浏览器的渲染过程</strong><br><img src="http://taligarsiel.com/Projects/webkitflow.png" alt=""></p>
<p><strong>Gecko(firefox)浏览器的渲染过程</strong><br><img src="http://taligarsiel.com/Projects/image008.jpg" alt=""></p>
<p>从图上可以看出来我们熟知的<code>Reflow</code>的说法源于ff,webkit这个过程称之为<code>layout(计算布局)</code>,意思大概差不多吧。<br><a id="more"></a></p>
<p><strong>浏览器的工作大致流程</strong><br><img src="http://coolshell.cn//wp-content/uploads/2013/05/Render-Process.jpg" alt=""></p>
<p>从这个过程中可以了解到浏览器渲染主要有这么几步</p>
<ol>
<li>解析HTML/XHTML/SVG 生成DOM tree,解析CSS生成CSS rule tree，解析script脚本</li>
<li>浏览器引擎通过DOM tree和css rule tree来构造render tree</li>
<li>调用系统的GUI绘图</li>
</ol>
<p>几个值得关注的点：</p>
<ol>
<li>render tree不完全包含dom tree的内容，<code>head</code>或者<code>display:none</code>的元素不会出现在render tree中</li>
<li>reflow/layout</li>
<li><code>reflow/layout</code>必定会<code>repaint</code>但<code>repaint</code>不一定会<code>reflow/layout</code></li>
<li>css rule tree的生成过程</li>
<li><blockquote>
<p>Repaint——屏幕的一部分要重画，比如某个CSS的背景色变了。但是元素的几何尺寸没有变。<br>Reflow——意味着元件的几何尺寸变了，我们需要重新验证并计算Render Tree。是Render Tree的一部分或全部发生了变化。这就是Reflow，或是Layout。（HTML使用的是flow based layout，也就是流式布局，所以，如果某元件的几何尺寸发生了变化，需要重新布局，也就叫reflow）reflow 会从<html>这个root frame开始递归往下，依次计算所有的结点几何尺寸和位置，在reflow过程中，可能会增加一些frame，比如一个文本字符串必需被包装起来。</html></p>
</blockquote>
</li>
</ol>
<p>参考:<br><a href="http://taligarsiel.com/Projects/howbrowserswork1.htm" target="_blank" rel="external">how browsers work</a><br><a href="http://coolshell.cn/articles/9666.html" target="_blank" rel="external">浏览器渲染原理简介</a></p>
<p>如果对这块知识感兴趣的话，建议去读下<a href="http://taligarsiel.com/Projects/howbrowserswork1.htm" target="_blank" rel="external">how browsers work</a>这篇文章，比较长，讲的很细致，比如Gecko和webkit在渲染上的一些差异，生成树(dom tree/css render tree)的一些具体算法什么的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在讨论页面渲染性能的时候，经常会听到这几个词“重绘” “回流” “重排”。&lt;br&gt;回流和重排都是 &lt;code&gt;Reflow&lt;/code&gt;的不同翻译(叫法)&lt;br&gt;重绘对应&lt;code&gt;Repaint&lt;/code&gt;，重新绘制的意思。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;webkit浏览器的渲染过程&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://taligarsiel.com/Projects/webkitflow.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Gecko(firefox)浏览器的渲染过程&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;http://taligarsiel.com/Projects/image008.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;从图上可以看出来我们熟知的&lt;code&gt;Reflow&lt;/code&gt;的说法源于ff,webkit这个过程称之为&lt;code&gt;layout(计算布局)&lt;/code&gt;,意思大概差不多吧。&lt;br&gt;
    
    </summary>
    
      <category term="前端" scheme="http://yoursite.com/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="浏览器渲染" scheme="http://yoursite.com/tags/%E6%B5%8F%E8%A7%88%E5%99%A8%E6%B8%B2%E6%9F%93/"/>
    
  </entry>
  
</feed>
