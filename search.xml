<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[正则表达式学习笔记]]></title>
    <url>%2F2019%2F04%2F13%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言之前写代码遇到个问题，就是[&quot;admin&quot;]提取其中的字符串admin因为不会写正则只能通过replace(&#39;[&quot;&#39;,&#39;&#39;).replace(&#39;&quot;]&#39;,&#39;&#39;)操作，感觉很笨拙，通过正则去应该是更好的方法。 本文主要了解 什么是正则表达式 基本语法规则 正则表达式是什么个人理解就是匹配文本的规则吧，了解这个规则怎么去写对文本处理真的太有帮助了。 基础语法元字符元字符是一些特定辅助精准匹配的特定字符 代码 说明 . 匹配除换行符以为的任何字符 \w 匹配字母 数字 下划线 汉字 \s 匹配任意空白符 \d 匹配数字 \b 匹配单词的开始或结束 ^ 匹配字符串的开始 $ 匹配字符串的结束 对于特殊字符需要通过\来转义，比如匹配.那么需要使用\. 重复 代码 说明 * 重复0次或更多次 + 重复1次或更多次 ？ 重复0次或1次 {n} 重复n次 {n,} 重复n或更多次 {n,m} 重复n到m次 设置匹配字符集通过[]来设定匹配字符集 如[0-9]就相当于\d 分组对单个字符来说，通过0{n}来设置匹配次数，但是对于字符串而言的话，通过分组来解决(\d{1,3}\.){3}\d{1,3}匹配ip。 反义 代码/语法 说明 \W 匹配任意不是字母，数字，下划线，汉字的字符 \S 匹配任意不是空白符的字符 \D 匹配任意非数字的字符 \B 匹配不是单词开头或结束的位置 [^x] 匹配除了x以外的任意字符 [^aeiou] 匹配除了aeiou这几个字母以外的任意字符 以上差不多就能日常使用了 其他高级用法参考正则表达式30分钟入门教程 总结回到上面之前的问题 从[&quot;admin&quot;]中提取admin就可以写 1'["amdin"]'.replace(/\[\"|\"\]/g,'')]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react ssr学习]]></title>
    <url>%2F2019%2F04%2F04%2Freact-ssr%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[前言了解ssr 带着问题 SSR是什么东西 同构有是什么 SSR使用场景，解决什么问题 那么怎么使用ssr 有没有现成的优秀的轮子直接用 看看轮子 参考文档React中同构原理(SSR)脉络梳理 服务端渲染vs 客户端渲染 笔记SSR是什么server-side rendering，字面意思就是服务端渲染，相对客户端渲染csr(client-side-rending)。 具体点说呢？ 客户端渲染的话，浏览器加载页面，服务端返回html文件但是没有内容展示，然后去加载执行html文件中的js去请求数据填充数据完成页面的交互事件绑定。 服务端渲染的话，返回html文件之前就把所有的数据填充好然后返回，浏览器只负责解析html就行了。 最后都是一样，有数据地展示页面。 SSR使用场景 seo，爬虫看不到完整源码 首屏加载慢，这个有体会。在 CSR 的页面渲染流程中，首先要加载 HTML 文件，之后要下载页面所需的 JavaScript 文件，然后 JavaScript 文件渲染生成页面。在这个渲染过程中至少涉及到两个 HTTP 请求周期，所以会有一定的耗时，这也是为什么大家在低网速下访问普通的 React 或者 Vue 应用时，初始页面会有出现白屏的原因。 缺点，第一篇参考文中有指出，本来简单的步骤因为ssr变得繁琐，项目可维护性差。 同构同构：同构这个概念存在于 Vue，React 这些新型的前端框架中，同构实际上是客户端渲染和服务器端渲染的一个整合。我们把页面的展示内容和交互写在一起，让代码执行两次。在服务器端执行一次，用于实现服务器端渲染，在客户端再执行一次，用于接管页面交互。 实现原理vitual-dom的存在]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>react</tag>
      </tags>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F04%2F04%2Fnpm%E6%8C%87%E4%BB%A4%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[前言npm操作指令笔记 查看1 查看已经安装的包文件 版本号 查看所有 npm list -g --depth=0(depth=0去掉其他依赖项) 查看特定npm view xxx version -g 查看过期的 npm outdated -g --depth=0 2 查看全局包安装路径 npm config get prefix,设置的话则 npm config set prefix &#39;&#39;]]></content>
  </entry>
  <entry>
    <title></title>
    <url>%2F2019%2F03%2F27%2F%E8%85%BE%E8%AE%AF%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%8A%98%E8%85%BE%E5%B0%8F%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言我差不多都忘了，我还有台腾讯云服务器，到2023年到期。我寻思着也不能这么浪费吧。所以花时间折腾下，做些记录咯。 命令行指南 yum: yellow dog updater 安装各种东西zsh(ys主题)https://www.jianshu.com/p/556ff130fc65]]></content>
  </entry>
  <entry>
    <title><![CDATA[git操作指南]]></title>
    <url>%2F2019%2F03%2F26%2Fgit%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97%2F</url>
    <content type="text"><![CDATA[前言 了解掌握基础的git操作 备忘录 操作新建本地分支 推送到远程仓库12git checkout -b feature-branch //创建并切换到分支feature-branch $ git push origin feature-branch:feature-branch //推送本地的feature-branch(冒号前面的)分支到远程origin的feature-branch(冒号后面的)分支(没有会自动创建)]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端Nginx配置]]></title>
    <url>%2F2019%2F03%2F25%2F%E5%89%8D%E7%AB%AFnginx%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[前言了解学习在服务器上安装并启动Nginx 参考资料菜鸟教程 nginx安装配置 笔记 查看系统信息 指令 安装Nginx遇到的问题 需要升级openssl 基本操作123// 查找服务ps -ef | grep nginx// 启动]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript事件机制]]></title>
    <url>%2F2019%2F03%2F21%2FJavaScript%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[前言 了解学习 JavaScript事件机制 Event Loop 单线程怎么做到 非阻塞 参考资料什么是Event Loop JavaScript 运行机制详解：再谈Event Loop Tasks, microtasks, queues and schedules 这一次彻底弄懂JavaScript执行机制 JS事件循环机制（event loop）之宏任务/微任务 从一道题说JavaScript的事件循环 笔记核心概念 JavaScript是单线程语言 Event Loop是JavaScript执行机制 执行顺序，js一般的执行顺序都是按正常顺序执行，如果触发了事件比如点击事件或者其他页面上的交互事件，会将事件放到执行栈Stack，然后顺序执行，这就有个问题，比如加载图片很慢会使得页面渲染很慢，所以需要引出异步的概念，对于异步的任务，]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Promise]]></title>
    <url>%2F2019%2F03%2F21%2FPromise%2F</url>
    <content type="text"><![CDATA[前言 Promise概念 解决什么问题 用法 疑惑 在 Effective JavaScript 的 第67项 不要对异步回调函数进行同步调用 参考资料MDN-Promise Promise小书 Promise是什么Promise是一个对象，是个什么对象？用来表示一个异步操作的最终状态(完成或者失败)，以及该异步操作的结果值。 笔记 Promise() 三种状态 pending FulFilled Rejected时候，对应的处理方法.then .catch 链式调用 Promise().then() 或者.catch() 都会返回一个新的Promise() 用Promise.all() .race() 对多个异步调用进行统一处理 all和race的差别，all是等所有Promise状态确定后(fulfilled或者rejected)才进行后面的处理，race是当某一个Promise状态确定后就会进行后面的处理 使用reject而不是throw来使得Promise状态变为rejected then和catch]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP请求]]></title>
    <url>%2F2019%2F03%2F21%2FHTTP%E8%AF%B7%E6%B1%82%2F</url>
    <content type="text"><![CDATA[前言通过接口看http请求 login接口 笔记 需要弄清楚http请求报头包括哪些内容 使用场景 CORS 安全性问题等 字段讲解General Request URL:请求接口url地址 Request Method:请求方法 post get put delete… Status Code：状态码 Remote Address:远程服务器ip Referrer Policy: 来源协议，需要了解，监管哪些访问来源信息 Response Headers Access-Control-Allow-Credentials:响应头表示是否可以将对请求的响应暴露给页面，true则可以，其他都不行。 Access-Control-Allow-Origin:访问控制允许同源，涉及到安全性CORS Cache-Control:缓存控制 Content-Type:返回数据类型 Date:服务器时间 Expires:响应过期的时间，0代表无效 Pragma: 兼容只支持HTTP/1.0协议的缓存服务器相当于Cache-Control作用 Transfer-Encoding:传递给用户采用的编码方式 Vary:一个HTTP响应头部信息，它决定了对于未来的一个请求头 X-Content-Type-Options:响应首部相当于一个提示标志，被服务器用来提示客户端一定要遵循在 Content-Type 首部中对 MIME 类型 的设定，而不能对其进行修改。 X-Frame-Options:是否允许当前页面通过iframe内嵌到其他网站中 X-XSS-Protection:响应头是Internet Explorer，Chrome和Safari的一个功能，当检测到跨站脚本攻击 (XSS)时，浏览器将停止加载页面。 Request Headers Accept: 发送端希望接受的数据类型 Content-Type:发送端发送的实体数据的类型 Origin:请求来自哪个站点 Referer:首部包含了当前请求页面的来源页面的地址，即表示当前页面是通过此来源页面里的链接进入的。 User-Agent:发起请求的用户代理软件信息]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始搭建React]]></title>
    <url>%2F2019%2F03%2F18%2F%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAReact%2F</url>
    <content type="text"><![CDATA[前言不借助脚手架 create-react-app，自己手工从零开始搭建React App npm 使用 webpack配置 其他 问题 安装babel的 还是babel-cli 以及怎么配置的 babel配置的问题 https://stackoverflow.com/questions/53326986/trace-the-node-type-spreadproperty-has-been-renamed-to-spreadelement-at-object https://github.com/babel/babel/issues/8707 学习 webpack配置 loader plugins babel配置 两种方式 package.json/.babelrc webpack打包过程中 webpack-dev-server 步骤 npm init 安装react 和react-dom 安装打包工具 webpack和webpack-dev-server 安装babel，转es6到es5(？)]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端工具]]></title>
    <url>%2F2019%2F03%2F17%2F%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[前言前端工具使用 live-server起个个本地服务，可以实现热更新 注意：–watch监视当前文件夹路径要写“.”，而不是“./“， not work: live-server ./ –port=9000 –watch=./ work: live-server . –port=9000 –watch=.]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习英语]]></title>
    <url>%2F2019%2F03%2F15%2F%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD%2F</url>
    <content type="text"><![CDATA[前言学习英语哇 为什么好好掌握英语 怎么学习 参考程序员学习英语 TODO 去找一些单词书 不要总是去app上背四六级单词 通过有道单词本 同步遇到的生词等 自己的词库 英语阅读参考手册 单词 背单词的方法： 每天适量坚持，比如每天80-100，因为比较容易，记得住，但是这种效果不是特别好，因为记得少 通过背诵大量的单词并快速复习，遗忘率虽然相对于定量背诵高，但是可以以量取胜。 比如:一天背20个词，一个月能背600个，假设形成长期记忆的占80%，那最后能记住的便是480个。 但是如果我用相同时间，每天快速看100个词，一个月能看3000个。假设能记住30%，最后能记住900个，远远大于第一种方式。 适用于在1000~7000词汇量这个学习阶段。 通过自己的单词本学习，而不是通过app上去背六级四级等单词本，很多时候会浪费时间，自己的单词本，遇到生词，比如阅读文档时候遇到，添加进去，然后复习。这样容易积累。 tips: 背单词的时候大多数时候不需要刻意的去记，简单的过一下就行，生词，生 词嘛，多过过，自然而然就熟悉了; 另外最好不要在公交 状态不好时候去背，效果并不佳，很多时候这种背诵只是走个过程，打个卡。专门留点时间去背。 听力选择听力材料 油管 适当订阅喜欢的内容，不要杂 刷喜欢的剧，重复刷的时候尝试关掉字幕 有意识地去听英文歌词 直播 听播 油管的频道推荐 tips: 选择的材料 比如说剧 音乐等 去选择自己喜欢的内容，这样才能坚持下去 阅读英语阅读参考手册 材料很多，从简单的文章，小说开始，逐步提高。 社区Medium Quora Reddit Twitter等。 口语之前尝试的学习方法就是通过类似英语流利说这样的app来训练，挺枯燥的。 读出来，比如读短文 读小说 唱喜欢的英语歌 如果能通过网络认识墙外的哥们 那就可以直接沟通了 这算一条路子]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js高程学习笔记]]></title>
    <url>%2F2019%2F03%2F11%2Fjs%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言重读js高程3的学习笔记，这本书很经典，值得多读几遍。特别是其中的js高级内容，需要很好地去掌握 作用域 原型 原型链 闭包 对象和函数 …]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[README]]></title>
    <url>%2F2019%2F03%2F01%2FREADME%2F</url>
    <content type="text"><![CDATA[重新开始写blog了]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
</search>
