<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[耐心点写好业务代码]]></title>
    <url>%2F2019%2F03%2F01%2F%E8%80%90%E5%BF%83%E7%82%B9%E5%86%99%E5%A5%BD%E4%B8%9A%E5%8A%A1%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[业务代码其实大部分时间大部分工作都是在写业务代码，有时候觉得很无趣每天写来写去都写一样的东西，类似增删改查，前端的业务代码也是用一些写好的公共组件库像搭建积木一样去搭建。写多了好像真的没意思，可是项目都是这样，如果自己真的很厌恶了，那应该从思考下为什么，怎么改变。 为什么厌恶 没什么技术难度，堆积组件 繁琐，细活，容易出错 没有成就感，就好像 就是一份工作，也就没有了什么追求吧 坏习惯发现自己平常写代码时候的一个坏习惯就是，对一些交互细节，总是不以为然，写的时候总想着把主流程走通，功能完成，细节以后再说。拖拉真的很严重，往往后续再花时间来改会浪费更多的时间，因为要重新审视自己的代码。 提高最讨厌的就是一边好厌烦写这样的代码，一边不得不继续为了生计写下去，这样的人生真的是矛盾而无趣。 解决方案要么就是老子不干这个事了，要么就是老子认了。 认真的反思了下自己，遇到这样，自己觉得还是自己的问题吧，很多时候没有调整好，没有做好。 认真很重要！！！认真很重要！！！认真很重要！！！ 虚心一点，踏实一点。]]></content>
      <categories>
        <category>工作</category>
      </categories>
      <tags>
        <tag>工作</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[next主题优化]]></title>
    <url>%2F2019%2F02%2F27%2Fnext%E4%B8%BB%E9%A2%98%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[出现的问题 锚点失效 好像需要从 h2开始写才会识别 参考 hexo目录锚点TOC失效 本地搜索异常的问题 前言本文主要记录next主题优化的一些点 图片展示增加图片预览功能add fancybox然后设置fancybox: true 评论系统添加disqus评论系统然后在_config.yml中找到disqus 进行配置，输入自己注册服务的shortname 访问量不蒜子统计 文章浏览进度主题背景修改主题点击动效 背景效果 [] canvas效果]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[热爱编程]]></title>
    <url>%2F2019%2F02%2F18%2F%E7%83%AD%E7%88%B1%E7%BC%96%E7%A8%8B%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[vscode 配置同步]]></title>
    <url>%2F2019%2F02%2F18%2Fvscode-%E9%85%8D%E7%BD%AE%E5%90%8C%E6%AD%A5%2F</url>
    <content type="text"><![CDATA[前言解决换电脑重装vscode时候要手动重装所有插件和配置。 工具 vscode Setting Sync 插件 github token 操作 下载插件 去github页面生成一个Personal access tokens 记下该token 将token配置到vscode shift alt u（或者指令操作） 会弹窗输入token值 同步或者下载 注意：可能会出现一些错误，可能是之前配置过的缘故，我直接选择了重置操作，然后重新配置。 参考vscode sync插件 在不同设备 同步的坑三分钟教你同步 Visual Studio Code 设置]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[2018年终小结]]></title>
    <url>%2F2018%2F12%2F31%2F2018%E5%B9%B4%E7%BB%88%E5%B0%8F%E7%BB%93%2F</url>
    <content type="text"><![CDATA[真是拖延啊，所以拖到最后一天才开始写写总结，总归有点形式大于内容吧。当然也希望明年变的好一点咯。 Flags of 2018这是年初随意敲的一些flag，感觉还是很贪心，而且很随意吧。一些事情吧还是在努力的去实现，当然也浪了很多。相比2017年多少还是有一些进步的，虽然今年浪了三个月（失业状态不积极工作），现在想想少赚了很多钱。 常年 健身减肥flag 英语提高，emmm，无障碍文档预读还是可以的 学日语，打算放弃又想学习下，主要还喜欢听一些日语歌吧 有进步吧，尽量隐藏职业风格 少熬夜啊 +30%左右吧，技能没啥提高太不努力了 拿下驾照 买车可以提上日程 生活态度 讲道理还是可以的吧 kindle吃灰到充不了电了都，尴尬，把实体书看完先 flag越随意，越多，就变得一点都不严肃不认真对待了。 Summary of 2018学车16年年初报名的，拖到18年10月份还没考科目二也是服气啊，可能是因为再不学要过期了，毕竟也是花了几千块报名的。但是啊太远了两个小时公交路程，当年咋就不会报一个近一点的，然后先想着驾校能不能退我点钱好了，我重新报一个近点学学好了。没退，那就学了。不得不承认学车的那段时间我的智商受到了侮辱。换了个教练，效果还挺好，上一个教练太保守了让我练了好几天的倒车入库，硬是把我练车的想法都磨没了。换了个教练半天练完倒库就去跑项目了，现在想来也就练了四五天不到，就去考试了，deadline还是有效果，考试报名了再说，而不是练到八成把握在报名，科二考场车的原因第一把第一个项目就挂了，略慌。还好凭借’良好的心理素质’(大不了80的补考费不心疼)第二把合格。科三练了三天就去考了，别问怎么过的，问就慢点开，别管的安全员催促，慢慢开就很稳。所以，拖延很久很久以为比较难处理的事情，很快完成掉还是挺开心的。 其他 好歹还是读了一些书 好歹没变的更胖（已经如此没有追求了） 跑步 背单词也会去弄，阶段性习惯 太浪了六月初离职，然后就休息练了几天车外出玩了趟，然后就开始断断续续不认真找工作。反正那段时间废的很，吃饭睡觉打游戏，现在想起来很糟糕吧，大概这就是堕落吧，真的快休息到不想去上班的节奏，还好及时认识到不对(嗯，要交房租了)。以后不会这样了，我觉得，实在太没有追求了。 再其他认识一些人和事，幸运也ok吧。 当前新年还是要有所期待的 Promise of 2019会忙碌充实因为又已经贪心地立下了很多flag，但并不随意。]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript dom编程艺术 笔记]]></title>
    <url>%2F2018%2F08%2F05%2Fjavascript-dom%E7%BC%96%E7%A8%8B%E8%89%BA%E6%9C%AF-%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[[TOC] 了解的知识点 DOM概念 JavaScript相关原生api 整理 知识要点XHTML HTMLXML给文档加标记，方便存储传输分享数据，XML的语法严格。XHTML就是用XML语法形式来写HTMLXHTML语法要求有 必须包含文件头声明&lt;!DOCTYPE&gt; 所有元素名小写 所有空元素必须关闭 所有属性值/名必须加引号 渐进增强和平稳退化渐进增强 progressive enhancement原则就一点，编写DOM时，考虑网站不支持js，css时候核心内容也能展示给用户。所以采用渐进增强原则来编写代码时候，不要通过JavaScript来添加一些重要内容，如果网站不支持js。总是应该从最核心的地方，即从内容开始，根据内容使用标记，实现良好的结构；然后再逐步加强这些内容，加强的工作既可以通过css改进呈现效果，也可以通过DOM添加各种行为。平稳退化： 渐进增强的实现必然支持平稳退化，如上，按渐进增强的原则去充实内容，就算去掉css或者DOM支持依然可以访问到核心内容。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node卸载与重装]]></title>
    <url>%2F2018%2F04%2F08%2Fnode%E5%8D%B8%E8%BD%BD%E4%B8%8E%E9%87%8D%E8%A3%85%2F</url>
    <content type="text"><![CDATA[前言因为不知道怎么回事 node 和 npm 安装时候总是会出现一些莫名其妙的问题,于是索性打算卸了重装，顺便学习一下遇到的一些问题。 homebrew symlink 软链接是啥 chmod 权限指令 改变权限 macOS /usr/bin 系统目录 分别放了什么内容 node 卸载1234sudo rm -rf /usr/local/lib/node_modulessudo rm -rf ~/.npmbrew uninstall --force nodebrew install node 总之就是把改删的都删除了就行了参考stackoverflow-uninstall node node安装可以去官网下载pkg安装，推荐使用brew install node安装 不清楚为什么这样 google后的解决方案是1234sudo chmod 776 /usr/local/libbrew link --overwrite node//Outputs: Linking /usr/local/Cellar/node/9.6.1... 49 symlinks createdsudo chmod 755 /usr/local/lib 应该是权限问题参考node already installed its just node linked最下面的回答 至此，卸载与安装完成 npm config 配置解释123456789101112131415161718; cli configsmetrics-registry = "https://registry.npm.taobao.org/"scope = ""user-agent = "npm/5.6.0 node/v9.11.1 darwin x64"; userconfig /Users/jingxiao/.npmrcconfig = ""cwd = "/Users/jingxiao"prefix = "/usr/local"registry = "https://registry.npm.taobao.org/"; builtin config undefinedprefix = "/usr/local"; node bin location = /usr/local/Cellar/node/9.11.1/bin/node; cwd = /Users/jingxiao; HOME = /Users/jingxiao; "npm config ls -l" to show all defaults. metrics-registry npm源地址，默认应该是指向npm的地址，我也没有去设置taobao源居然自动换成了淘宝源。scope 域名，比如个人或者公司私有的仓库，不用担心重名问题了 @somescope/somepackagenameuser-agent 用户代理，比如浏览器的话就是chrome firefox之类的，n这里就是node环境了prefix npm全局路径cwd process.cwd() current working directory. 当前工作目录 npm 安装权限问题 全局安装webpack并没有问题，安装webpack-cli指令时候会有权限问题解决权限问题1sudo chown -R $(whoami) $(npm config get prefix)/&#123;lib/node_modules,bin,share&#125;]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[给hexo博客自定义域名加https]]></title>
    <url>%2F2017%2F12%2F03%2F%E7%BB%99hexo%E5%8D%9A%E5%AE%A2%E8%87%AA%E5%AE%9A%E4%B9%89%E5%9F%9F%E5%90%8D%E5%8A%A0https%2F</url>
    <content type="text"><![CDATA[给自定义域名加https 目的 看上去更加安全 小绿锁看上去更好看 实现方案 cloudflare走cloudflare的DNS解析 注册cloudflare账号 添加域名然后一步步走下去就ok了 把你域名原有的DNS修改成cloudflare的比如我的是万网 在cloudflare上check 应该很快生效 在cloudflare上配置DNS 之前一直弄不好就是因为这里没有配置好按这样配置就ok了，因为是挂在github上的静态博客，所以192.30.252.153指向的github的ip,CNAME的配置，我不是很明白，但就是这样配置就好了。如果你操作完一直不成功可以查看是不是这里配置出问题了。 配置规则，强制走https访问有个小绿锁还是蛮好看的 一些知识主要只是就是了解DNS配置时候的A AAAA CNAME等都是啥DNS全称，Domain Name System,域名系统，作为互联网的一项服务,将域名和ip地址映射的一个分布式数据库。通过DNS就可以通过域名，找到对应的物理机ip。上面的A AAAA CNAME都是这套系统的资源记录类型。 代码 描述 功能 A IP地址记录 映射主机域名到IPv4地址 AAAA IPv6 IP地址记录 映射主机域名到IPv6地址 CNAME 规范名称记录 一个主机域名的别名，告诉在哪个地方继续寻找 MX 电邮交互记录 引导域名到该域名的邮件传输代理(MTA)列表 还有更多的类型参考域名服务器记录类型列表，域名查询服务 其他应该多去学习一下计算机网络相关的知识]]></content>
      <categories>
        <category>https</category>
      </categories>
      <tags>
        <tag>dns</tag>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js对象和原型对象]]></title>
    <url>%2F2017%2F11%2F11%2Fjs%E5%AF%B9%E8%B1%A1%E5%92%8C%E5%8E%9F%E5%9E%8B%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[前言学习了解JavaScript对象的继承机制 JavaScript Object概念Object是js的基本数据结构的一种，属于引用类型。 对象的创建方法 对象字面量写法 构造函数，通过构造函数来创建对象实例 Object()构造函数 create()方法12345678910111213141516171819202122232425// 对象字面量let person1 = &#123;name: 'jim'&#125;; // 构造函数function Person(name) &#123; this.name = name; this.greeting = function() &#123; console.log('hello my name is ' + this.name); &#125;&#125;let person2 = new Person('Bob');console.log(person2.name);console.log(person2.greeting());// Object() 方法let person3 = new Object();person3.name = 'kobe';console.log(person3.name);person3 = new Object(&#123; name: 'kobe2', age: 22&#125;);console.log(person3.name);// create() 方法 类似构造函数 let person4 = Object.create(person3);person4.name = 'kobe3';console.log(person4.name,person3.name); 对象属性的访问方式 点表示法 中括号表示法123456let person = &#123; name: 'xiaofei', age: 20&#125;console.log(person.name);console.log(person['age']); proto、[[prototype]]、prototype JavaScript对象通过原型机制从其他对象继承功能特性 每个对象有一个私有属性[[prototype]]，这个私有属性持有一个连接到另一个称为其prototype对象（原型对象）的链接。 __proto__是浏览器对ES语法[[prototype]]的实现api prototype属性指向的对象就是实例对象的原型对象即__proto__所指引的对象 原型链，原型对象也可能拥有原型，并从中继承方法和属性，一层一层、以此类推。这种关系常被称为原型链 (prototype chain)，它解释了为何一个对象会拥有定义在其他对象中的属性和方法。例1 例2 通过原型链来检测对象所调用的方法是否存在，存在在哪个原型对象上 person1除了name,age在对象对象中存在外，其他方法都是通过原型链的方法在Object上找到并调用。]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>原型</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
