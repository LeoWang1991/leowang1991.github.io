<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[JavaScript事件机制]]></title>
    <url>%2F2019%2F03%2F21%2FJavaScript%E4%BA%8B%E4%BB%B6%E6%9C%BA%E5%88%B6%2F</url>
    <content type="text"><![CDATA[前言 了解学习 JavaScript事件机制 Event Loop 单线程怎么做到 非阻塞 参考资料 什么是Event Loop JavaScript 运行机制详解：再谈Event Loop Tasks, microtasks, queues and schedules 这一次彻底弄懂JavaScript执行机制 JS事件循环机制（event loop）之宏任务/微任务 从一道题说JavaScript的事件循环 笔记 核心概念 JavaScript是单线程语言 Event Loop是JavaScript执行机制 执行顺序，js一般的执行顺序都是按正常顺序执行，如果触发了事件比如点击事件或者其他页面上的交互事件，会将事件放到执行栈Stack，然后顺序执行，这就有个问题，比如加载图片很慢会使得页面渲染很慢，所以需要引出异步的概念，对于异步的任务，]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Promise]]></title>
    <url>%2F2019%2F03%2F21%2FPromise%2F</url>
    <content type="text"><![CDATA[前言 Promise概念 解决什么问题 用法 Promise是什么]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>es6</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[HTTP请求]]></title>
    <url>%2F2019%2F03%2F21%2FHTTP%E8%AF%B7%E6%B1%82%2F</url>
    <content type="text"><![CDATA[前言 通过接口看http请求 login接口 笔记 需要弄清楚http请求报头包括哪些内容 使用场景 CORS 安全性问题等 字段讲解 General Request URL:请求接口url地址 Request Method:请求方法 post get put delete… Status Code：状态码 Remote Address:远程服务器ip Referrer Policy: 来源协议，需要了解，监管哪些访问来源信息 Response Headers Access-Control-Allow-Credentials:响应头表示是否可以将对请求的响应暴露给页面，true则可以，其他都不行。 Access-Control-Allow-Origin:访问控制允许同源，涉及到安全性CORS Cache-Control:缓存控制 Content-Type:返回数据类型 Date:服务器时间 Expires:响应过期的时间，0代表无效 Pragma: 兼容只支持HTTP/1.0协议的缓存服务器相当于Cache-Control作用 Transfer-Encoding:传递给用户采用的编码方式 Vary:一个HTTP响应头部信息，它决定了对于未来的一个请求头 X-Content-Type-Options:响应首部相当于一个提示标志，被服务器用来提示客户端一定要遵循在 Content-Type 首部中对 MIME 类型 的设定，而不能对其进行修改。 X-Frame-Options:是否允许当前页面通过iframe内嵌到其他网站中 X-XSS-Protection:响应头是Internet Explorer，Chrome和Safari的一个功能，当检测到跨站脚本攻击 (XSS)时，浏览器将停止加载页面。 Request Headers Accept: 发送端希望接受的数据类型 Content-Type:发送端发送的实体数据的类型 Origin:请求来自哪个站点 Referer:首部包含了当前请求页面的来源页面的地址，即表示当前页面是通过此来源页面里的链接进入的。 User-Agent:发起请求的用户代理软件信息]]></content>
      <categories>
        <category>网络</category>
      </categories>
      <tags>
        <tag>http</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[从零开始搭建React]]></title>
    <url>%2F2019%2F03%2F18%2F%E4%BB%8E%E9%9B%B6%E6%90%AD%E5%BB%BAReact%2F</url>
    <content type="text"><![CDATA[前言 不借助脚手架 create-react-app，自己手工从零开始搭建React App npm 使用 webpack配置 其他 问题 安装babel的 还是babel-cli 以及怎么配置的 babel配置的问题 https://stackoverflow.com/questions/53326986/trace-the-node-type-spreadproperty-has-been-renamed-to-spreadelement-at-object https://github.com/babel/babel/issues/8707 学习 webpack配置 loader plugins babel配置 两种方式 package.json/.babelrc webpack打包过程中 webpack-dev-server 步骤 npm init 安装react 和react-dom 安装打包工具 webpack和webpack-dev-server 安装babel，转es6到es5(？)]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue学习]]></title>
    <url>%2F2019%2F03%2F18%2Fvue%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[前言 Vue.js官网教程笔记 学习目标 Vue基本语法 数据的双向绑定 深入和最佳实践（？） 基础语法 创建一个Vue对象 123456const app = new Vue(&#123; el: '#app', data: &#123; message: 'hello Vue' &#125;&#125;)]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[前端工具]]></title>
    <url>%2F2019%2F03%2F17%2F%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7%2F</url>
    <content type="text"><![CDATA[前言 前端工具使用 live-server 起个个本地服务，可以实现热更新 注意：–watch监视当前文件夹路径要写**&quot;.&quot;，而不是&quot;./&quot;**， not work: live-server ./ --port=9000 --watch=./ work: live-server . --port=9000 --watch=.]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[学习英语]]></title>
    <url>%2F2019%2F03%2F15%2F%E5%AD%A6%E4%B9%A0%E8%8B%B1%E8%AF%AD%2F</url>
    <content type="text"><![CDATA[前言 学习英语哇 为什么好好掌握英语 怎么学习 参考 程序员学习英语 TODO 去找一些单词书 不要总是去app上背四六级单词 通过有道单词本 同步遇到的生词等 自己的词库 英语阅读参考手册 单词 背单词的方法： 每天适量坚持，比如每天80-100，因为比较容易，记得住，但是这种效果不是特别好，因为记得少 通过背诵大量的单词并快速复习，遗忘率虽然相对于定量背诵高，但是可以以量取胜。 比如:一天背20个词，一个月能背600个，假设形成长期记忆的占80%，那最后能记住的便是480个。 但是如果我用相同时间，每天快速看100个词，一个月能看3000个。假设能记住30%，最后能记住900个，远远大于第一种方式。 适用于在1000~7000词汇量这个学习阶段。 通过自己的单词本学习，而不是通过app上去背六级四级等单词本，很多时候会浪费时间，自己的单词本，遇到生词，比如阅读文档时候遇到，添加进去，然后复习。这样容易积累。 tips: 背单词的时候大多数时候不需要刻意的去记，简单的过一下就行，生词，生 词嘛，多过过，自然而然就熟悉了; 另外最好不要在公交 状态不好时候去背，效果并不佳，很多时候这种背诵只是走个过程，打个卡。专门留点时间去背。 听力 选择听力材料 油管 适当订阅喜欢的内容，不要杂 刷喜欢的剧，重复刷的时候尝试关掉字幕 有意识地去听英文歌词 直播 听播 油管的频道推荐 tips: 选择的材料 比如说剧 音乐等 去选择自己喜欢的内容，这样才能坚持下去 阅读 英语阅读参考手册 材料很多，从简单的文章，小说开始，逐步提高。 社区Medium Quora Reddit Twitter等。 口语 之前尝试的学习方法就是通过类似英语流利说这样的app来训练，挺枯燥的。 读出来，比如读短文 读小说 唱喜欢的英语歌 如果能通过网络认识墙外的哥们 那就可以直接沟通了 这算一条路子]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>英语</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[antd pro使用]]></title>
    <url>%2F2019%2F03%2F11%2Fantd%20pro%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[前言 Antd Pro使用]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>antd</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js高程学习笔记]]></title>
    <url>%2F2019%2F03%2F11%2Fjs%E9%AB%98%E7%A8%8B%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[前言 重读js高程3的学习笔记，这本书很经典，值得多读几遍。特别是其中的js高级内容，需要很好地去掌握 作用域 原型 原型链 闭包 对象和函数 … Chapter1 JavaScript简介 名词 ECMA European Computer Manufacturers Association.欧洲计算机制造商协会。 TC39，ECMA协会指定的39号技术委员会，负责脚本语言的语法和语义。 javascript实现包括了 ECMAScript+DOM+BOM DOM 1 DOM (Document Object Model)针对XML但经过扩展用于HTML的应用程序接口(API)，用来操作文档树。 2 DOM级别1，2，3 DOM1: DOM Core+DOM HTML DOM2: 引入了DOM视图(DOM View), DOM事件]]></content>
      <categories>
        <category>前端</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nodejs]]></title>
    <url>%2F2019%2F03%2F09%2Fnodejs%E5%AD%A6%E4%B9%A0%2F</url>
    <content type="text"><![CDATA[前言 nodejs学习笔记]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>node</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker学习]]></title>
    <url>%2F2019%2F03%2F03%2FDocker%2F</url>
    <content type="text"><![CDATA[前言 了解下Docker docker是什么 安装配置 实践 Docker是什么 首先看下Docker官网的定义 Docker provides a way to run application security isolated in a container, packaged with all its dependencies and libraries. 三个概念： application container dependencies and libraries 安装和配置 Docker国内镜像下载]]></content>
      <categories>
        <category>后端</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[README]]></title>
    <url>%2F2019%2F03%2F01%2FREADME%2F</url>
    <content type="text"><![CDATA[重新开始写blog了]]></content>
      <categories>
        <category>其他</category>
      </categories>
  </entry>
</search>
